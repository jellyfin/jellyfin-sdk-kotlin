// !!        WARNING
// !! DO NOT EDIT THIS FILE
//
// This file is generated by the openapi-generator module and is not meant for manual changes.
// Please read the README.md file in the openapi-generator module for additional information.
package org.jellyfin.sdk.api.operations

import io.ktor.utils.io.ByteReadChannel
import kotlin.Any
import kotlin.Boolean
import kotlin.Double
import kotlin.Int
import kotlin.String
import kotlin.Unit
import kotlin.collections.List
import kotlin.collections.emptyMap
import kotlin.collections.mutableMapOf
import org.jellyfin.sdk.api.client.ApiClient
import org.jellyfin.sdk.api.client.Response
import org.jellyfin.sdk.api.client.exception.MissingUserIdException
import org.jellyfin.sdk.api.client.extensions.`get`
import org.jellyfin.sdk.api.client.extensions.delete
import org.jellyfin.sdk.api.client.extensions.post
import org.jellyfin.sdk.model.UUID
import org.jellyfin.sdk.model.api.ImageFormat
import org.jellyfin.sdk.model.api.ImageInfo
import org.jellyfin.sdk.model.api.ImageType

public class ImageApi(
	private val api: ApiClient
) : Api {
	/**
	 * Delete an item's image.
	 *
	 * @param itemId Item id.
	 * @param imageType Image type.
	 * @param imageIndex The image index.
	 */
	public suspend fun deleteItemImage(
		itemId: UUID,
		imageType: ImageType,
		imageIndex: Int? = null
	): Response<Unit> {
		val pathParameters = mutableMapOf<String, Any?>()
		pathParameters["itemId"] = itemId
		pathParameters["imageType"] = imageType
		val queryParameters = mutableMapOf<String, Any?>()
		queryParameters["imageIndex"] = imageIndex
		val data = null
		val response = api.delete<Unit>("/Items/{itemId}/Images/{imageType}", pathParameters,
				queryParameters, data)
		return response
	}

	/**
	 * Delete an item's image.
	 *
	 * @param itemId Item id.
	 * @param imageType Image type.
	 * @param imageIndex The image index.
	 */
	public suspend fun deleteItemImageByIndex(
		itemId: UUID,
		imageType: ImageType,
		imageIndex: Int
	): Response<Unit> {
		val pathParameters = mutableMapOf<String, Any?>()
		pathParameters["itemId"] = itemId
		pathParameters["imageType"] = imageType
		pathParameters["imageIndex"] = imageIndex
		val queryParameters = emptyMap<String, Any?>()
		val data = null
		val response = api.delete<Unit>("/Items/{itemId}/Images/{imageType}/{imageIndex}", pathParameters,
				queryParameters, data)
		return response
	}

	/**
	 * Delete the user's image.
	 *
	 * @param userId User Id.
	 * @param imageType (Unused) Image type.
	 * @param index (Unused) Image index.
	 */
	public suspend fun deleteUserImage(
		userId: UUID = api.userId ?: throw MissingUserIdException(),
		imageType: ImageType,
		index: Int? = null
	): Response<Unit> {
		val pathParameters = mutableMapOf<String, Any?>()
		pathParameters["userId"] = userId
		pathParameters["imageType"] = imageType
		val queryParameters = mutableMapOf<String, Any?>()
		queryParameters["index"] = index
		val data = null
		val response = api.delete<Unit>("/Users/{userId}/Images/{imageType}", pathParameters,
				queryParameters, data)
		return response
	}

	/**
	 * Delete the user's image.
	 *
	 * @param userId User Id.
	 * @param imageType (Unused) Image type.
	 * @param index (Unused) Image index.
	 */
	public suspend fun deleteUserImageByIndex(
		userId: UUID = api.userId ?: throw MissingUserIdException(),
		imageType: ImageType,
		index: Int
	): Response<Unit> {
		val pathParameters = mutableMapOf<String, Any?>()
		pathParameters["userId"] = userId
		pathParameters["imageType"] = imageType
		pathParameters["index"] = index
		val queryParameters = emptyMap<String, Any?>()
		val data = null
		val response = api.delete<Unit>("/Users/{userId}/Images/{imageType}/{index}", pathParameters,
				queryParameters, data)
		return response
	}

	/**
	 * Get artist image by name.
	 *
	 * @param name Artist name.
	 * @param imageType Image type.
	 * @param imageIndex Image index.
	 * @param tag Optional. Supply the cache tag from the item object to receive strong caching
	 * headers.
	 * @param format Determines the output format of the image - original,gif,jpg,png.
	 * @param maxWidth The maximum image width to return.
	 * @param maxHeight The maximum image height to return.
	 * @param percentPlayed Optional. Percent to render for the percent played overlay.
	 * @param unplayedCount Optional. Unplayed count overlay to render.
	 * @param width The fixed image width to return.
	 * @param height The fixed image height to return.
	 * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most
	 * cases.
	 * @param fillWidth Width of box to fill.
	 * @param fillHeight Height of box to fill.
	 * @param cropWhitespace Optional. Specify if whitespace should be cropped out of the image.
	 * True/False. If unspecified, whitespace will be cropped from logos and clear art.
	 * @param addPlayedIndicator Optional. Add a played indicator.
	 * @param blur Optional. Blur image.
	 * @param backgroundColor Optional. Apply a background color for transparent images.
	 * @param foregroundLayer Optional. Apply a foreground layer on top of the image.
	 */
	public suspend fun getArtistImage(
		name: String,
		imageType: ImageType,
		imageIndex: Int,
		tag: String? = null,
		format: ImageFormat? = null,
		maxWidth: Int? = null,
		maxHeight: Int? = null,
		percentPlayed: Double? = null,
		unplayedCount: Int? = null,
		width: Int? = null,
		height: Int? = null,
		quality: Int? = null,
		fillWidth: Int? = null,
		fillHeight: Int? = null,
		cropWhitespace: Boolean? = null,
		addPlayedIndicator: Boolean? = null,
		blur: Int? = null,
		backgroundColor: String? = null,
		foregroundLayer: String? = null
	): Response<ByteReadChannel> {
		val pathParameters = mutableMapOf<String, Any?>()
		pathParameters["name"] = name
		pathParameters["imageType"] = imageType
		pathParameters["imageIndex"] = imageIndex
		val queryParameters = mutableMapOf<String, Any?>()
		queryParameters["tag"] = tag
		queryParameters["format"] = format
		queryParameters["maxWidth"] = maxWidth
		queryParameters["maxHeight"] = maxHeight
		queryParameters["percentPlayed"] = percentPlayed
		queryParameters["unplayedCount"] = unplayedCount
		queryParameters["width"] = width
		queryParameters["height"] = height
		queryParameters["quality"] = quality
		queryParameters["fillWidth"] = fillWidth
		queryParameters["fillHeight"] = fillHeight
		queryParameters["cropWhitespace"] = cropWhitespace
		queryParameters["addPlayedIndicator"] = addPlayedIndicator
		queryParameters["blur"] = blur
		queryParameters["backgroundColor"] = backgroundColor
		queryParameters["foregroundLayer"] = foregroundLayer
		val data = null
		val response = api.`get`<ByteReadChannel>("/Artists/{name}/Images/{imageType}/{imageIndex}",
				pathParameters, queryParameters, data)
		return response
	}

	/**
	 * Get artist image by name.
	 *
	 * @param name Artist name.
	 * @param imageType Image type.
	 * @param imageIndex Image index.
	 * @param tag Optional. Supply the cache tag from the item object to receive strong caching
	 * headers.
	 * @param format Determines the output format of the image - original,gif,jpg,png.
	 * @param maxWidth The maximum image width to return.
	 * @param maxHeight The maximum image height to return.
	 * @param percentPlayed Optional. Percent to render for the percent played overlay.
	 * @param unplayedCount Optional. Unplayed count overlay to render.
	 * @param width The fixed image width to return.
	 * @param height The fixed image height to return.
	 * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most
	 * cases.
	 * @param fillWidth Width of box to fill.
	 * @param fillHeight Height of box to fill.
	 * @param cropWhitespace Optional. Specify if whitespace should be cropped out of the image.
	 * True/False. If unspecified, whitespace will be cropped from logos and clear art.
	 * @param addPlayedIndicator Optional. Add a played indicator.
	 * @param blur Optional. Blur image.
	 * @param backgroundColor Optional. Apply a background color for transparent images.
	 * @param foregroundLayer Optional. Apply a foreground layer on top of the image.
	 * @param includeCredentials Add the access token to the url to make an authenticated request.
	 */
	public fun getArtistImageUrl(
		name: String,
		imageType: ImageType,
		imageIndex: Int,
		tag: String? = null,
		format: ImageFormat? = null,
		maxWidth: Int? = null,
		maxHeight: Int? = null,
		percentPlayed: Double? = null,
		unplayedCount: Int? = null,
		width: Int? = null,
		height: Int? = null,
		quality: Int? = null,
		fillWidth: Int? = null,
		fillHeight: Int? = null,
		cropWhitespace: Boolean? = null,
		addPlayedIndicator: Boolean? = null,
		blur: Int? = null,
		backgroundColor: String? = null,
		foregroundLayer: String? = null,
		includeCredentials: Boolean = false
	): String {
		val pathParameters = mutableMapOf<String, Any?>()
		pathParameters["name"] = name
		pathParameters["imageType"] = imageType
		pathParameters["imageIndex"] = imageIndex
		val queryParameters = mutableMapOf<String, Any?>()
		queryParameters["tag"] = tag
		queryParameters["format"] = format
		queryParameters["maxWidth"] = maxWidth
		queryParameters["maxHeight"] = maxHeight
		queryParameters["percentPlayed"] = percentPlayed
		queryParameters["unplayedCount"] = unplayedCount
		queryParameters["width"] = width
		queryParameters["height"] = height
		queryParameters["quality"] = quality
		queryParameters["fillWidth"] = fillWidth
		queryParameters["fillHeight"] = fillHeight
		queryParameters["cropWhitespace"] = cropWhitespace
		queryParameters["addPlayedIndicator"] = addPlayedIndicator
		queryParameters["blur"] = blur
		queryParameters["backgroundColor"] = backgroundColor
		queryParameters["foregroundLayer"] = foregroundLayer
		return api.createUrl("/Artists/{name}/Images/{imageType}/{imageIndex}", pathParameters,
				queryParameters, includeCredentials)
	}

	/**
	 * Get genre image by name.
	 *
	 * @param name Genre name.
	 * @param imageType Image type.
	 * @param tag Optional. Supply the cache tag from the item object to receive strong caching
	 * headers.
	 * @param format Determines the output format of the image - original,gif,jpg,png.
	 * @param maxWidth The maximum image width to return.
	 * @param maxHeight The maximum image height to return.
	 * @param percentPlayed Optional. Percent to render for the percent played overlay.
	 * @param unplayedCount Optional. Unplayed count overlay to render.
	 * @param width The fixed image width to return.
	 * @param height The fixed image height to return.
	 * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most
	 * cases.
	 * @param fillWidth Width of box to fill.
	 * @param fillHeight Height of box to fill.
	 * @param cropWhitespace Optional. Specify if whitespace should be cropped out of the image.
	 * True/False. If unspecified, whitespace will be cropped from logos and clear art.
	 * @param addPlayedIndicator Optional. Add a played indicator.
	 * @param blur Optional. Blur image.
	 * @param backgroundColor Optional. Apply a background color for transparent images.
	 * @param foregroundLayer Optional. Apply a foreground layer on top of the image.
	 * @param imageIndex Image index.
	 */
	public suspend fun getGenreImage(
		name: String,
		imageType: ImageType,
		tag: String? = null,
		format: ImageFormat? = null,
		maxWidth: Int? = null,
		maxHeight: Int? = null,
		percentPlayed: Double? = null,
		unplayedCount: Int? = null,
		width: Int? = null,
		height: Int? = null,
		quality: Int? = null,
		fillWidth: Int? = null,
		fillHeight: Int? = null,
		cropWhitespace: Boolean? = null,
		addPlayedIndicator: Boolean? = null,
		blur: Int? = null,
		backgroundColor: String? = null,
		foregroundLayer: String? = null,
		imageIndex: Int? = null
	): Response<ByteReadChannel> {
		val pathParameters = mutableMapOf<String, Any?>()
		pathParameters["name"] = name
		pathParameters["imageType"] = imageType
		val queryParameters = mutableMapOf<String, Any?>()
		queryParameters["tag"] = tag
		queryParameters["format"] = format
		queryParameters["maxWidth"] = maxWidth
		queryParameters["maxHeight"] = maxHeight
		queryParameters["percentPlayed"] = percentPlayed
		queryParameters["unplayedCount"] = unplayedCount
		queryParameters["width"] = width
		queryParameters["height"] = height
		queryParameters["quality"] = quality
		queryParameters["fillWidth"] = fillWidth
		queryParameters["fillHeight"] = fillHeight
		queryParameters["cropWhitespace"] = cropWhitespace
		queryParameters["addPlayedIndicator"] = addPlayedIndicator
		queryParameters["blur"] = blur
		queryParameters["backgroundColor"] = backgroundColor
		queryParameters["foregroundLayer"] = foregroundLayer
		queryParameters["imageIndex"] = imageIndex
		val data = null
		val response = api.`get`<ByteReadChannel>("/Genres/{name}/Images/{imageType}", pathParameters,
				queryParameters, data)
		return response
	}

	/**
	 * Get genre image by name.
	 *
	 * @param name Genre name.
	 * @param imageType Image type.
	 * @param tag Optional. Supply the cache tag from the item object to receive strong caching
	 * headers.
	 * @param format Determines the output format of the image - original,gif,jpg,png.
	 * @param maxWidth The maximum image width to return.
	 * @param maxHeight The maximum image height to return.
	 * @param percentPlayed Optional. Percent to render for the percent played overlay.
	 * @param unplayedCount Optional. Unplayed count overlay to render.
	 * @param width The fixed image width to return.
	 * @param height The fixed image height to return.
	 * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most
	 * cases.
	 * @param fillWidth Width of box to fill.
	 * @param fillHeight Height of box to fill.
	 * @param cropWhitespace Optional. Specify if whitespace should be cropped out of the image.
	 * True/False. If unspecified, whitespace will be cropped from logos and clear art.
	 * @param addPlayedIndicator Optional. Add a played indicator.
	 * @param blur Optional. Blur image.
	 * @param backgroundColor Optional. Apply a background color for transparent images.
	 * @param foregroundLayer Optional. Apply a foreground layer on top of the image.
	 * @param imageIndex Image index.
	 * @param includeCredentials Add the access token to the url to make an authenticated request.
	 */
	public fun getGenreImageUrl(
		name: String,
		imageType: ImageType,
		tag: String? = null,
		format: ImageFormat? = null,
		maxWidth: Int? = null,
		maxHeight: Int? = null,
		percentPlayed: Double? = null,
		unplayedCount: Int? = null,
		width: Int? = null,
		height: Int? = null,
		quality: Int? = null,
		fillWidth: Int? = null,
		fillHeight: Int? = null,
		cropWhitespace: Boolean? = null,
		addPlayedIndicator: Boolean? = null,
		blur: Int? = null,
		backgroundColor: String? = null,
		foregroundLayer: String? = null,
		imageIndex: Int? = null,
		includeCredentials: Boolean = false
	): String {
		val pathParameters = mutableMapOf<String, Any?>()
		pathParameters["name"] = name
		pathParameters["imageType"] = imageType
		val queryParameters = mutableMapOf<String, Any?>()
		queryParameters["tag"] = tag
		queryParameters["format"] = format
		queryParameters["maxWidth"] = maxWidth
		queryParameters["maxHeight"] = maxHeight
		queryParameters["percentPlayed"] = percentPlayed
		queryParameters["unplayedCount"] = unplayedCount
		queryParameters["width"] = width
		queryParameters["height"] = height
		queryParameters["quality"] = quality
		queryParameters["fillWidth"] = fillWidth
		queryParameters["fillHeight"] = fillHeight
		queryParameters["cropWhitespace"] = cropWhitespace
		queryParameters["addPlayedIndicator"] = addPlayedIndicator
		queryParameters["blur"] = blur
		queryParameters["backgroundColor"] = backgroundColor
		queryParameters["foregroundLayer"] = foregroundLayer
		queryParameters["imageIndex"] = imageIndex
		return api.createUrl("/Genres/{name}/Images/{imageType}", pathParameters, queryParameters,
				includeCredentials)
	}

	/**
	 * Get genre image by name.
	 *
	 * @param name Genre name.
	 * @param imageType Image type.
	 * @param imageIndex Image index.
	 * @param tag Optional. Supply the cache tag from the item object to receive strong caching
	 * headers.
	 * @param format Determines the output format of the image - original,gif,jpg,png.
	 * @param maxWidth The maximum image width to return.
	 * @param maxHeight The maximum image height to return.
	 * @param percentPlayed Optional. Percent to render for the percent played overlay.
	 * @param unplayedCount Optional. Unplayed count overlay to render.
	 * @param width The fixed image width to return.
	 * @param height The fixed image height to return.
	 * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most
	 * cases.
	 * @param fillWidth Width of box to fill.
	 * @param fillHeight Height of box to fill.
	 * @param cropWhitespace Optional. Specify if whitespace should be cropped out of the image.
	 * True/False. If unspecified, whitespace will be cropped from logos and clear art.
	 * @param addPlayedIndicator Optional. Add a played indicator.
	 * @param blur Optional. Blur image.
	 * @param backgroundColor Optional. Apply a background color for transparent images.
	 * @param foregroundLayer Optional. Apply a foreground layer on top of the image.
	 */
	public suspend fun getGenreImageByIndex(
		name: String,
		imageType: ImageType,
		imageIndex: Int,
		tag: String? = null,
		format: ImageFormat? = null,
		maxWidth: Int? = null,
		maxHeight: Int? = null,
		percentPlayed: Double? = null,
		unplayedCount: Int? = null,
		width: Int? = null,
		height: Int? = null,
		quality: Int? = null,
		fillWidth: Int? = null,
		fillHeight: Int? = null,
		cropWhitespace: Boolean? = null,
		addPlayedIndicator: Boolean? = null,
		blur: Int? = null,
		backgroundColor: String? = null,
		foregroundLayer: String? = null
	): Response<ByteReadChannel> {
		val pathParameters = mutableMapOf<String, Any?>()
		pathParameters["name"] = name
		pathParameters["imageType"] = imageType
		pathParameters["imageIndex"] = imageIndex
		val queryParameters = mutableMapOf<String, Any?>()
		queryParameters["tag"] = tag
		queryParameters["format"] = format
		queryParameters["maxWidth"] = maxWidth
		queryParameters["maxHeight"] = maxHeight
		queryParameters["percentPlayed"] = percentPlayed
		queryParameters["unplayedCount"] = unplayedCount
		queryParameters["width"] = width
		queryParameters["height"] = height
		queryParameters["quality"] = quality
		queryParameters["fillWidth"] = fillWidth
		queryParameters["fillHeight"] = fillHeight
		queryParameters["cropWhitespace"] = cropWhitespace
		queryParameters["addPlayedIndicator"] = addPlayedIndicator
		queryParameters["blur"] = blur
		queryParameters["backgroundColor"] = backgroundColor
		queryParameters["foregroundLayer"] = foregroundLayer
		val data = null
		val response = api.`get`<ByteReadChannel>("/Genres/{name}/Images/{imageType}/{imageIndex}",
				pathParameters, queryParameters, data)
		return response
	}

	/**
	 * Get genre image by name.
	 *
	 * @param name Genre name.
	 * @param imageType Image type.
	 * @param imageIndex Image index.
	 * @param tag Optional. Supply the cache tag from the item object to receive strong caching
	 * headers.
	 * @param format Determines the output format of the image - original,gif,jpg,png.
	 * @param maxWidth The maximum image width to return.
	 * @param maxHeight The maximum image height to return.
	 * @param percentPlayed Optional. Percent to render for the percent played overlay.
	 * @param unplayedCount Optional. Unplayed count overlay to render.
	 * @param width The fixed image width to return.
	 * @param height The fixed image height to return.
	 * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most
	 * cases.
	 * @param fillWidth Width of box to fill.
	 * @param fillHeight Height of box to fill.
	 * @param cropWhitespace Optional. Specify if whitespace should be cropped out of the image.
	 * True/False. If unspecified, whitespace will be cropped from logos and clear art.
	 * @param addPlayedIndicator Optional. Add a played indicator.
	 * @param blur Optional. Blur image.
	 * @param backgroundColor Optional. Apply a background color for transparent images.
	 * @param foregroundLayer Optional. Apply a foreground layer on top of the image.
	 * @param includeCredentials Add the access token to the url to make an authenticated request.
	 */
	public fun getGenreImageByIndexUrl(
		name: String,
		imageType: ImageType,
		imageIndex: Int,
		tag: String? = null,
		format: ImageFormat? = null,
		maxWidth: Int? = null,
		maxHeight: Int? = null,
		percentPlayed: Double? = null,
		unplayedCount: Int? = null,
		width: Int? = null,
		height: Int? = null,
		quality: Int? = null,
		fillWidth: Int? = null,
		fillHeight: Int? = null,
		cropWhitespace: Boolean? = null,
		addPlayedIndicator: Boolean? = null,
		blur: Int? = null,
		backgroundColor: String? = null,
		foregroundLayer: String? = null,
		includeCredentials: Boolean = false
	): String {
		val pathParameters = mutableMapOf<String, Any?>()
		pathParameters["name"] = name
		pathParameters["imageType"] = imageType
		pathParameters["imageIndex"] = imageIndex
		val queryParameters = mutableMapOf<String, Any?>()
		queryParameters["tag"] = tag
		queryParameters["format"] = format
		queryParameters["maxWidth"] = maxWidth
		queryParameters["maxHeight"] = maxHeight
		queryParameters["percentPlayed"] = percentPlayed
		queryParameters["unplayedCount"] = unplayedCount
		queryParameters["width"] = width
		queryParameters["height"] = height
		queryParameters["quality"] = quality
		queryParameters["fillWidth"] = fillWidth
		queryParameters["fillHeight"] = fillHeight
		queryParameters["cropWhitespace"] = cropWhitespace
		queryParameters["addPlayedIndicator"] = addPlayedIndicator
		queryParameters["blur"] = blur
		queryParameters["backgroundColor"] = backgroundColor
		queryParameters["foregroundLayer"] = foregroundLayer
		return api.createUrl("/Genres/{name}/Images/{imageType}/{imageIndex}", pathParameters,
				queryParameters, includeCredentials)
	}

	/**
	 * Gets the item's image.
	 *
	 * @param itemId Item id.
	 * @param imageType Image type.
	 * @param maxWidth The maximum image width to return.
	 * @param maxHeight The maximum image height to return.
	 * @param width The fixed image width to return.
	 * @param height The fixed image height to return.
	 * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most
	 * cases.
	 * @param fillWidth Width of box to fill.
	 * @param fillHeight Height of box to fill.
	 * @param tag Optional. Supply the cache tag from the item object to receive strong caching
	 * headers.
	 * @param cropWhitespace Optional. Specify if whitespace should be cropped out of the image.
	 * True/False. If unspecified, whitespace will be cropped from logos and clear art.
	 * @param format Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image.
	 * @param addPlayedIndicator Optional. Add a played indicator.
	 * @param percentPlayed Optional. Percent to render for the percent played overlay.
	 * @param unplayedCount Optional. Unplayed count overlay to render.
	 * @param blur Optional. Blur image.
	 * @param backgroundColor Optional. Apply a background color for transparent images.
	 * @param foregroundLayer Optional. Apply a foreground layer on top of the image.
	 * @param imageIndex Image index.
	 */
	public suspend fun getItemImage(
		itemId: UUID,
		imageType: ImageType,
		maxWidth: Int? = null,
		maxHeight: Int? = null,
		width: Int? = null,
		height: Int? = null,
		quality: Int? = null,
		fillWidth: Int? = null,
		fillHeight: Int? = null,
		tag: String? = null,
		cropWhitespace: Boolean? = null,
		format: ImageFormat? = null,
		addPlayedIndicator: Boolean? = null,
		percentPlayed: Double? = null,
		unplayedCount: Int? = null,
		blur: Int? = null,
		backgroundColor: String? = null,
		foregroundLayer: String? = null,
		imageIndex: Int? = null
	): Response<ByteReadChannel> {
		val pathParameters = mutableMapOf<String, Any?>()
		pathParameters["itemId"] = itemId
		pathParameters["imageType"] = imageType
		val queryParameters = mutableMapOf<String, Any?>()
		queryParameters["maxWidth"] = maxWidth
		queryParameters["maxHeight"] = maxHeight
		queryParameters["width"] = width
		queryParameters["height"] = height
		queryParameters["quality"] = quality
		queryParameters["fillWidth"] = fillWidth
		queryParameters["fillHeight"] = fillHeight
		queryParameters["tag"] = tag
		queryParameters["cropWhitespace"] = cropWhitespace
		queryParameters["format"] = format
		queryParameters["addPlayedIndicator"] = addPlayedIndicator
		queryParameters["percentPlayed"] = percentPlayed
		queryParameters["unplayedCount"] = unplayedCount
		queryParameters["blur"] = blur
		queryParameters["backgroundColor"] = backgroundColor
		queryParameters["foregroundLayer"] = foregroundLayer
		queryParameters["imageIndex"] = imageIndex
		val data = null
		val response = api.`get`<ByteReadChannel>("/Items/{itemId}/Images/{imageType}", pathParameters,
				queryParameters, data)
		return response
	}

	/**
	 * Gets the item's image.
	 *
	 * @param itemId Item id.
	 * @param imageType Image type.
	 * @param maxWidth The maximum image width to return.
	 * @param maxHeight The maximum image height to return.
	 * @param width The fixed image width to return.
	 * @param height The fixed image height to return.
	 * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most
	 * cases.
	 * @param fillWidth Width of box to fill.
	 * @param fillHeight Height of box to fill.
	 * @param tag Optional. Supply the cache tag from the item object to receive strong caching
	 * headers.
	 * @param cropWhitespace Optional. Specify if whitespace should be cropped out of the image.
	 * True/False. If unspecified, whitespace will be cropped from logos and clear art.
	 * @param format Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image.
	 * @param addPlayedIndicator Optional. Add a played indicator.
	 * @param percentPlayed Optional. Percent to render for the percent played overlay.
	 * @param unplayedCount Optional. Unplayed count overlay to render.
	 * @param blur Optional. Blur image.
	 * @param backgroundColor Optional. Apply a background color for transparent images.
	 * @param foregroundLayer Optional. Apply a foreground layer on top of the image.
	 * @param imageIndex Image index.
	 * @param includeCredentials Add the access token to the url to make an authenticated request.
	 */
	public fun getItemImageUrl(
		itemId: UUID,
		imageType: ImageType,
		maxWidth: Int? = null,
		maxHeight: Int? = null,
		width: Int? = null,
		height: Int? = null,
		quality: Int? = null,
		fillWidth: Int? = null,
		fillHeight: Int? = null,
		tag: String? = null,
		cropWhitespace: Boolean? = null,
		format: ImageFormat? = null,
		addPlayedIndicator: Boolean? = null,
		percentPlayed: Double? = null,
		unplayedCount: Int? = null,
		blur: Int? = null,
		backgroundColor: String? = null,
		foregroundLayer: String? = null,
		imageIndex: Int? = null,
		includeCredentials: Boolean = false
	): String {
		val pathParameters = mutableMapOf<String, Any?>()
		pathParameters["itemId"] = itemId
		pathParameters["imageType"] = imageType
		val queryParameters = mutableMapOf<String, Any?>()
		queryParameters["maxWidth"] = maxWidth
		queryParameters["maxHeight"] = maxHeight
		queryParameters["width"] = width
		queryParameters["height"] = height
		queryParameters["quality"] = quality
		queryParameters["fillWidth"] = fillWidth
		queryParameters["fillHeight"] = fillHeight
		queryParameters["tag"] = tag
		queryParameters["cropWhitespace"] = cropWhitespace
		queryParameters["format"] = format
		queryParameters["addPlayedIndicator"] = addPlayedIndicator
		queryParameters["percentPlayed"] = percentPlayed
		queryParameters["unplayedCount"] = unplayedCount
		queryParameters["blur"] = blur
		queryParameters["backgroundColor"] = backgroundColor
		queryParameters["foregroundLayer"] = foregroundLayer
		queryParameters["imageIndex"] = imageIndex
		return api.createUrl("/Items/{itemId}/Images/{imageType}", pathParameters, queryParameters,
				includeCredentials)
	}

	/**
	 * Gets the item's image.
	 *
	 * @param itemId Item id.
	 * @param imageType Image type.
	 * @param maxWidth The maximum image width to return.
	 * @param maxHeight The maximum image height to return.
	 * @param tag Optional. Supply the cache tag from the item object to receive strong caching
	 * headers.
	 * @param format Determines the output format of the image - original,gif,jpg,png.
	 * @param percentPlayed Optional. Percent to render for the percent played overlay.
	 * @param unplayedCount Optional. Unplayed count overlay to render.
	 * @param imageIndex Image index.
	 * @param width The fixed image width to return.
	 * @param height The fixed image height to return.
	 * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most
	 * cases.
	 * @param fillWidth Width of box to fill.
	 * @param fillHeight Height of box to fill.
	 * @param cropWhitespace Optional. Specify if whitespace should be cropped out of the image.
	 * True/False. If unspecified, whitespace will be cropped from logos and clear art.
	 * @param addPlayedIndicator Optional. Add a played indicator.
	 * @param blur Optional. Blur image.
	 * @param backgroundColor Optional. Apply a background color for transparent images.
	 * @param foregroundLayer Optional. Apply a foreground layer on top of the image.
	 */
	public suspend fun getItemImage2(
		itemId: UUID,
		imageType: ImageType,
		maxWidth: Int,
		maxHeight: Int,
		tag: String,
		format: ImageFormat,
		percentPlayed: Double,
		unplayedCount: Int,
		imageIndex: Int,
		width: Int? = null,
		height: Int? = null,
		quality: Int? = null,
		fillWidth: Int? = null,
		fillHeight: Int? = null,
		cropWhitespace: Boolean? = null,
		addPlayedIndicator: Boolean? = null,
		blur: Int? = null,
		backgroundColor: String? = null,
		foregroundLayer: String? = null
	): Response<ByteReadChannel> {
		val pathParameters = mutableMapOf<String, Any?>()
		pathParameters["itemId"] = itemId
		pathParameters["imageType"] = imageType
		pathParameters["maxWidth"] = maxWidth
		pathParameters["maxHeight"] = maxHeight
		pathParameters["tag"] = tag
		pathParameters["format"] = format
		pathParameters["percentPlayed"] = percentPlayed
		pathParameters["unplayedCount"] = unplayedCount
		pathParameters["imageIndex"] = imageIndex
		val queryParameters = mutableMapOf<String, Any?>()
		queryParameters["width"] = width
		queryParameters["height"] = height
		queryParameters["quality"] = quality
		queryParameters["fillWidth"] = fillWidth
		queryParameters["fillHeight"] = fillHeight
		queryParameters["cropWhitespace"] = cropWhitespace
		queryParameters["addPlayedIndicator"] = addPlayedIndicator
		queryParameters["blur"] = blur
		queryParameters["backgroundColor"] = backgroundColor
		queryParameters["foregroundLayer"] = foregroundLayer
		val data = null
		val response =
				api.`get`<ByteReadChannel>("/Items/{itemId}/Images/{imageType}/{imageIndex}/{tag}/{format}/{maxWidth}/{maxHeight}/{percentPlayed}/{unplayedCount}",
				pathParameters, queryParameters, data)
		return response
	}

	/**
	 * Gets the item's image.
	 *
	 * @param itemId Item id.
	 * @param imageType Image type.
	 * @param maxWidth The maximum image width to return.
	 * @param maxHeight The maximum image height to return.
	 * @param tag Optional. Supply the cache tag from the item object to receive strong caching
	 * headers.
	 * @param format Determines the output format of the image - original,gif,jpg,png.
	 * @param percentPlayed Optional. Percent to render for the percent played overlay.
	 * @param unplayedCount Optional. Unplayed count overlay to render.
	 * @param imageIndex Image index.
	 * @param width The fixed image width to return.
	 * @param height The fixed image height to return.
	 * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most
	 * cases.
	 * @param fillWidth Width of box to fill.
	 * @param fillHeight Height of box to fill.
	 * @param cropWhitespace Optional. Specify if whitespace should be cropped out of the image.
	 * True/False. If unspecified, whitespace will be cropped from logos and clear art.
	 * @param addPlayedIndicator Optional. Add a played indicator.
	 * @param blur Optional. Blur image.
	 * @param backgroundColor Optional. Apply a background color for transparent images.
	 * @param foregroundLayer Optional. Apply a foreground layer on top of the image.
	 * @param includeCredentials Add the access token to the url to make an authenticated request.
	 */
	public fun getItemImage2Url(
		itemId: UUID,
		imageType: ImageType,
		maxWidth: Int,
		maxHeight: Int,
		tag: String,
		format: ImageFormat,
		percentPlayed: Double,
		unplayedCount: Int,
		imageIndex: Int,
		width: Int? = null,
		height: Int? = null,
		quality: Int? = null,
		fillWidth: Int? = null,
		fillHeight: Int? = null,
		cropWhitespace: Boolean? = null,
		addPlayedIndicator: Boolean? = null,
		blur: Int? = null,
		backgroundColor: String? = null,
		foregroundLayer: String? = null,
		includeCredentials: Boolean = false
	): String {
		val pathParameters = mutableMapOf<String, Any?>()
		pathParameters["itemId"] = itemId
		pathParameters["imageType"] = imageType
		pathParameters["maxWidth"] = maxWidth
		pathParameters["maxHeight"] = maxHeight
		pathParameters["tag"] = tag
		pathParameters["format"] = format
		pathParameters["percentPlayed"] = percentPlayed
		pathParameters["unplayedCount"] = unplayedCount
		pathParameters["imageIndex"] = imageIndex
		val queryParameters = mutableMapOf<String, Any?>()
		queryParameters["width"] = width
		queryParameters["height"] = height
		queryParameters["quality"] = quality
		queryParameters["fillWidth"] = fillWidth
		queryParameters["fillHeight"] = fillHeight
		queryParameters["cropWhitespace"] = cropWhitespace
		queryParameters["addPlayedIndicator"] = addPlayedIndicator
		queryParameters["blur"] = blur
		queryParameters["backgroundColor"] = backgroundColor
		queryParameters["foregroundLayer"] = foregroundLayer
		return api.createUrl("/Items/{itemId}/Images/{imageType}/{imageIndex}/{tag}/{format}/{maxWidth}/{maxHeight}/{percentPlayed}/{unplayedCount}",
				pathParameters, queryParameters, includeCredentials)
	}

	/**
	 * Gets the item's image.
	 *
	 * @param itemId Item id.
	 * @param imageType Image type.
	 * @param imageIndex Image index.
	 * @param maxWidth The maximum image width to return.
	 * @param maxHeight The maximum image height to return.
	 * @param width The fixed image width to return.
	 * @param height The fixed image height to return.
	 * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most
	 * cases.
	 * @param fillWidth Width of box to fill.
	 * @param fillHeight Height of box to fill.
	 * @param tag Optional. Supply the cache tag from the item object to receive strong caching
	 * headers.
	 * @param cropWhitespace Optional. Specify if whitespace should be cropped out of the image.
	 * True/False. If unspecified, whitespace will be cropped from logos and clear art.
	 * @param format Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image.
	 * @param addPlayedIndicator Optional. Add a played indicator.
	 * @param percentPlayed Optional. Percent to render for the percent played overlay.
	 * @param unplayedCount Optional. Unplayed count overlay to render.
	 * @param blur Optional. Blur image.
	 * @param backgroundColor Optional. Apply a background color for transparent images.
	 * @param foregroundLayer Optional. Apply a foreground layer on top of the image.
	 */
	public suspend fun getItemImageByIndex(
		itemId: UUID,
		imageType: ImageType,
		imageIndex: Int,
		maxWidth: Int? = null,
		maxHeight: Int? = null,
		width: Int? = null,
		height: Int? = null,
		quality: Int? = null,
		fillWidth: Int? = null,
		fillHeight: Int? = null,
		tag: String? = null,
		cropWhitespace: Boolean? = null,
		format: ImageFormat? = null,
		addPlayedIndicator: Boolean? = null,
		percentPlayed: Double? = null,
		unplayedCount: Int? = null,
		blur: Int? = null,
		backgroundColor: String? = null,
		foregroundLayer: String? = null
	): Response<ByteReadChannel> {
		val pathParameters = mutableMapOf<String, Any?>()
		pathParameters["itemId"] = itemId
		pathParameters["imageType"] = imageType
		pathParameters["imageIndex"] = imageIndex
		val queryParameters = mutableMapOf<String, Any?>()
		queryParameters["maxWidth"] = maxWidth
		queryParameters["maxHeight"] = maxHeight
		queryParameters["width"] = width
		queryParameters["height"] = height
		queryParameters["quality"] = quality
		queryParameters["fillWidth"] = fillWidth
		queryParameters["fillHeight"] = fillHeight
		queryParameters["tag"] = tag
		queryParameters["cropWhitespace"] = cropWhitespace
		queryParameters["format"] = format
		queryParameters["addPlayedIndicator"] = addPlayedIndicator
		queryParameters["percentPlayed"] = percentPlayed
		queryParameters["unplayedCount"] = unplayedCount
		queryParameters["blur"] = blur
		queryParameters["backgroundColor"] = backgroundColor
		queryParameters["foregroundLayer"] = foregroundLayer
		val data = null
		val response = api.`get`<ByteReadChannel>("/Items/{itemId}/Images/{imageType}/{imageIndex}",
				pathParameters, queryParameters, data)
		return response
	}

	/**
	 * Gets the item's image.
	 *
	 * @param itemId Item id.
	 * @param imageType Image type.
	 * @param imageIndex Image index.
	 * @param maxWidth The maximum image width to return.
	 * @param maxHeight The maximum image height to return.
	 * @param width The fixed image width to return.
	 * @param height The fixed image height to return.
	 * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most
	 * cases.
	 * @param fillWidth Width of box to fill.
	 * @param fillHeight Height of box to fill.
	 * @param tag Optional. Supply the cache tag from the item object to receive strong caching
	 * headers.
	 * @param cropWhitespace Optional. Specify if whitespace should be cropped out of the image.
	 * True/False. If unspecified, whitespace will be cropped from logos and clear art.
	 * @param format Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image.
	 * @param addPlayedIndicator Optional. Add a played indicator.
	 * @param percentPlayed Optional. Percent to render for the percent played overlay.
	 * @param unplayedCount Optional. Unplayed count overlay to render.
	 * @param blur Optional. Blur image.
	 * @param backgroundColor Optional. Apply a background color for transparent images.
	 * @param foregroundLayer Optional. Apply a foreground layer on top of the image.
	 * @param includeCredentials Add the access token to the url to make an authenticated request.
	 */
	public fun getItemImageByIndexUrl(
		itemId: UUID,
		imageType: ImageType,
		imageIndex: Int,
		maxWidth: Int? = null,
		maxHeight: Int? = null,
		width: Int? = null,
		height: Int? = null,
		quality: Int? = null,
		fillWidth: Int? = null,
		fillHeight: Int? = null,
		tag: String? = null,
		cropWhitespace: Boolean? = null,
		format: ImageFormat? = null,
		addPlayedIndicator: Boolean? = null,
		percentPlayed: Double? = null,
		unplayedCount: Int? = null,
		blur: Int? = null,
		backgroundColor: String? = null,
		foregroundLayer: String? = null,
		includeCredentials: Boolean = false
	): String {
		val pathParameters = mutableMapOf<String, Any?>()
		pathParameters["itemId"] = itemId
		pathParameters["imageType"] = imageType
		pathParameters["imageIndex"] = imageIndex
		val queryParameters = mutableMapOf<String, Any?>()
		queryParameters["maxWidth"] = maxWidth
		queryParameters["maxHeight"] = maxHeight
		queryParameters["width"] = width
		queryParameters["height"] = height
		queryParameters["quality"] = quality
		queryParameters["fillWidth"] = fillWidth
		queryParameters["fillHeight"] = fillHeight
		queryParameters["tag"] = tag
		queryParameters["cropWhitespace"] = cropWhitespace
		queryParameters["format"] = format
		queryParameters["addPlayedIndicator"] = addPlayedIndicator
		queryParameters["percentPlayed"] = percentPlayed
		queryParameters["unplayedCount"] = unplayedCount
		queryParameters["blur"] = blur
		queryParameters["backgroundColor"] = backgroundColor
		queryParameters["foregroundLayer"] = foregroundLayer
		return api.createUrl("/Items/{itemId}/Images/{imageType}/{imageIndex}", pathParameters,
				queryParameters, includeCredentials)
	}

	/**
	 * Get item image infos.
	 *
	 * @param itemId Item id.
	 */
	public suspend fun getItemImageInfos(itemId: UUID): Response<List<ImageInfo>> {
		val pathParameters = mutableMapOf<String, Any?>()
		pathParameters["itemId"] = itemId
		val queryParameters = emptyMap<String, Any?>()
		val data = null
		val response = api.`get`<List<ImageInfo>>("/Items/{itemId}/Images", pathParameters,
				queryParameters, data)
		return response
	}

	/**
	 * Get music genre image by name.
	 *
	 * @param name Music genre name.
	 * @param imageType Image type.
	 * @param tag Optional. Supply the cache tag from the item object to receive strong caching
	 * headers.
	 * @param format Determines the output format of the image - original,gif,jpg,png.
	 * @param maxWidth The maximum image width to return.
	 * @param maxHeight The maximum image height to return.
	 * @param percentPlayed Optional. Percent to render for the percent played overlay.
	 * @param unplayedCount Optional. Unplayed count overlay to render.
	 * @param width The fixed image width to return.
	 * @param height The fixed image height to return.
	 * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most
	 * cases.
	 * @param fillWidth Width of box to fill.
	 * @param fillHeight Height of box to fill.
	 * @param cropWhitespace Optional. Specify if whitespace should be cropped out of the image.
	 * True/False. If unspecified, whitespace will be cropped from logos and clear art.
	 * @param addPlayedIndicator Optional. Add a played indicator.
	 * @param blur Optional. Blur image.
	 * @param backgroundColor Optional. Apply a background color for transparent images.
	 * @param foregroundLayer Optional. Apply a foreground layer on top of the image.
	 * @param imageIndex Image index.
	 */
	public suspend fun getMusicGenreImage(
		name: String,
		imageType: ImageType,
		tag: String? = null,
		format: ImageFormat? = null,
		maxWidth: Int? = null,
		maxHeight: Int? = null,
		percentPlayed: Double? = null,
		unplayedCount: Int? = null,
		width: Int? = null,
		height: Int? = null,
		quality: Int? = null,
		fillWidth: Int? = null,
		fillHeight: Int? = null,
		cropWhitespace: Boolean? = null,
		addPlayedIndicator: Boolean? = null,
		blur: Int? = null,
		backgroundColor: String? = null,
		foregroundLayer: String? = null,
		imageIndex: Int? = null
	): Response<ByteReadChannel> {
		val pathParameters = mutableMapOf<String, Any?>()
		pathParameters["name"] = name
		pathParameters["imageType"] = imageType
		val queryParameters = mutableMapOf<String, Any?>()
		queryParameters["tag"] = tag
		queryParameters["format"] = format
		queryParameters["maxWidth"] = maxWidth
		queryParameters["maxHeight"] = maxHeight
		queryParameters["percentPlayed"] = percentPlayed
		queryParameters["unplayedCount"] = unplayedCount
		queryParameters["width"] = width
		queryParameters["height"] = height
		queryParameters["quality"] = quality
		queryParameters["fillWidth"] = fillWidth
		queryParameters["fillHeight"] = fillHeight
		queryParameters["cropWhitespace"] = cropWhitespace
		queryParameters["addPlayedIndicator"] = addPlayedIndicator
		queryParameters["blur"] = blur
		queryParameters["backgroundColor"] = backgroundColor
		queryParameters["foregroundLayer"] = foregroundLayer
		queryParameters["imageIndex"] = imageIndex
		val data = null
		val response = api.`get`<ByteReadChannel>("/MusicGenres/{name}/Images/{imageType}",
				pathParameters, queryParameters, data)
		return response
	}

	/**
	 * Get music genre image by name.
	 *
	 * @param name Music genre name.
	 * @param imageType Image type.
	 * @param tag Optional. Supply the cache tag from the item object to receive strong caching
	 * headers.
	 * @param format Determines the output format of the image - original,gif,jpg,png.
	 * @param maxWidth The maximum image width to return.
	 * @param maxHeight The maximum image height to return.
	 * @param percentPlayed Optional. Percent to render for the percent played overlay.
	 * @param unplayedCount Optional. Unplayed count overlay to render.
	 * @param width The fixed image width to return.
	 * @param height The fixed image height to return.
	 * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most
	 * cases.
	 * @param fillWidth Width of box to fill.
	 * @param fillHeight Height of box to fill.
	 * @param cropWhitespace Optional. Specify if whitespace should be cropped out of the image.
	 * True/False. If unspecified, whitespace will be cropped from logos and clear art.
	 * @param addPlayedIndicator Optional. Add a played indicator.
	 * @param blur Optional. Blur image.
	 * @param backgroundColor Optional. Apply a background color for transparent images.
	 * @param foregroundLayer Optional. Apply a foreground layer on top of the image.
	 * @param imageIndex Image index.
	 * @param includeCredentials Add the access token to the url to make an authenticated request.
	 */
	public fun getMusicGenreImageUrl(
		name: String,
		imageType: ImageType,
		tag: String? = null,
		format: ImageFormat? = null,
		maxWidth: Int? = null,
		maxHeight: Int? = null,
		percentPlayed: Double? = null,
		unplayedCount: Int? = null,
		width: Int? = null,
		height: Int? = null,
		quality: Int? = null,
		fillWidth: Int? = null,
		fillHeight: Int? = null,
		cropWhitespace: Boolean? = null,
		addPlayedIndicator: Boolean? = null,
		blur: Int? = null,
		backgroundColor: String? = null,
		foregroundLayer: String? = null,
		imageIndex: Int? = null,
		includeCredentials: Boolean = false
	): String {
		val pathParameters = mutableMapOf<String, Any?>()
		pathParameters["name"] = name
		pathParameters["imageType"] = imageType
		val queryParameters = mutableMapOf<String, Any?>()
		queryParameters["tag"] = tag
		queryParameters["format"] = format
		queryParameters["maxWidth"] = maxWidth
		queryParameters["maxHeight"] = maxHeight
		queryParameters["percentPlayed"] = percentPlayed
		queryParameters["unplayedCount"] = unplayedCount
		queryParameters["width"] = width
		queryParameters["height"] = height
		queryParameters["quality"] = quality
		queryParameters["fillWidth"] = fillWidth
		queryParameters["fillHeight"] = fillHeight
		queryParameters["cropWhitespace"] = cropWhitespace
		queryParameters["addPlayedIndicator"] = addPlayedIndicator
		queryParameters["blur"] = blur
		queryParameters["backgroundColor"] = backgroundColor
		queryParameters["foregroundLayer"] = foregroundLayer
		queryParameters["imageIndex"] = imageIndex
		return api.createUrl("/MusicGenres/{name}/Images/{imageType}", pathParameters, queryParameters,
				includeCredentials)
	}

	/**
	 * Get music genre image by name.
	 *
	 * @param name Music genre name.
	 * @param imageType Image type.
	 * @param imageIndex Image index.
	 * @param tag Optional. Supply the cache tag from the item object to receive strong caching
	 * headers.
	 * @param format Determines the output format of the image - original,gif,jpg,png.
	 * @param maxWidth The maximum image width to return.
	 * @param maxHeight The maximum image height to return.
	 * @param percentPlayed Optional. Percent to render for the percent played overlay.
	 * @param unplayedCount Optional. Unplayed count overlay to render.
	 * @param width The fixed image width to return.
	 * @param height The fixed image height to return.
	 * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most
	 * cases.
	 * @param fillWidth Width of box to fill.
	 * @param fillHeight Height of box to fill.
	 * @param cropWhitespace Optional. Specify if whitespace should be cropped out of the image.
	 * True/False. If unspecified, whitespace will be cropped from logos and clear art.
	 * @param addPlayedIndicator Optional. Add a played indicator.
	 * @param blur Optional. Blur image.
	 * @param backgroundColor Optional. Apply a background color for transparent images.
	 * @param foregroundLayer Optional. Apply a foreground layer on top of the image.
	 */
	public suspend fun getMusicGenreImageByIndex(
		name: String,
		imageType: ImageType,
		imageIndex: Int,
		tag: String? = null,
		format: ImageFormat? = null,
		maxWidth: Int? = null,
		maxHeight: Int? = null,
		percentPlayed: Double? = null,
		unplayedCount: Int? = null,
		width: Int? = null,
		height: Int? = null,
		quality: Int? = null,
		fillWidth: Int? = null,
		fillHeight: Int? = null,
		cropWhitespace: Boolean? = null,
		addPlayedIndicator: Boolean? = null,
		blur: Int? = null,
		backgroundColor: String? = null,
		foregroundLayer: String? = null
	): Response<ByteReadChannel> {
		val pathParameters = mutableMapOf<String, Any?>()
		pathParameters["name"] = name
		pathParameters["imageType"] = imageType
		pathParameters["imageIndex"] = imageIndex
		val queryParameters = mutableMapOf<String, Any?>()
		queryParameters["tag"] = tag
		queryParameters["format"] = format
		queryParameters["maxWidth"] = maxWidth
		queryParameters["maxHeight"] = maxHeight
		queryParameters["percentPlayed"] = percentPlayed
		queryParameters["unplayedCount"] = unplayedCount
		queryParameters["width"] = width
		queryParameters["height"] = height
		queryParameters["quality"] = quality
		queryParameters["fillWidth"] = fillWidth
		queryParameters["fillHeight"] = fillHeight
		queryParameters["cropWhitespace"] = cropWhitespace
		queryParameters["addPlayedIndicator"] = addPlayedIndicator
		queryParameters["blur"] = blur
		queryParameters["backgroundColor"] = backgroundColor
		queryParameters["foregroundLayer"] = foregroundLayer
		val data = null
		val response = api.`get`<ByteReadChannel>("/MusicGenres/{name}/Images/{imageType}/{imageIndex}",
				pathParameters, queryParameters, data)
		return response
	}

	/**
	 * Get music genre image by name.
	 *
	 * @param name Music genre name.
	 * @param imageType Image type.
	 * @param imageIndex Image index.
	 * @param tag Optional. Supply the cache tag from the item object to receive strong caching
	 * headers.
	 * @param format Determines the output format of the image - original,gif,jpg,png.
	 * @param maxWidth The maximum image width to return.
	 * @param maxHeight The maximum image height to return.
	 * @param percentPlayed Optional. Percent to render for the percent played overlay.
	 * @param unplayedCount Optional. Unplayed count overlay to render.
	 * @param width The fixed image width to return.
	 * @param height The fixed image height to return.
	 * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most
	 * cases.
	 * @param fillWidth Width of box to fill.
	 * @param fillHeight Height of box to fill.
	 * @param cropWhitespace Optional. Specify if whitespace should be cropped out of the image.
	 * True/False. If unspecified, whitespace will be cropped from logos and clear art.
	 * @param addPlayedIndicator Optional. Add a played indicator.
	 * @param blur Optional. Blur image.
	 * @param backgroundColor Optional. Apply a background color for transparent images.
	 * @param foregroundLayer Optional. Apply a foreground layer on top of the image.
	 * @param includeCredentials Add the access token to the url to make an authenticated request.
	 */
	public fun getMusicGenreImageByIndexUrl(
		name: String,
		imageType: ImageType,
		imageIndex: Int,
		tag: String? = null,
		format: ImageFormat? = null,
		maxWidth: Int? = null,
		maxHeight: Int? = null,
		percentPlayed: Double? = null,
		unplayedCount: Int? = null,
		width: Int? = null,
		height: Int? = null,
		quality: Int? = null,
		fillWidth: Int? = null,
		fillHeight: Int? = null,
		cropWhitespace: Boolean? = null,
		addPlayedIndicator: Boolean? = null,
		blur: Int? = null,
		backgroundColor: String? = null,
		foregroundLayer: String? = null,
		includeCredentials: Boolean = false
	): String {
		val pathParameters = mutableMapOf<String, Any?>()
		pathParameters["name"] = name
		pathParameters["imageType"] = imageType
		pathParameters["imageIndex"] = imageIndex
		val queryParameters = mutableMapOf<String, Any?>()
		queryParameters["tag"] = tag
		queryParameters["format"] = format
		queryParameters["maxWidth"] = maxWidth
		queryParameters["maxHeight"] = maxHeight
		queryParameters["percentPlayed"] = percentPlayed
		queryParameters["unplayedCount"] = unplayedCount
		queryParameters["width"] = width
		queryParameters["height"] = height
		queryParameters["quality"] = quality
		queryParameters["fillWidth"] = fillWidth
		queryParameters["fillHeight"] = fillHeight
		queryParameters["cropWhitespace"] = cropWhitespace
		queryParameters["addPlayedIndicator"] = addPlayedIndicator
		queryParameters["blur"] = blur
		queryParameters["backgroundColor"] = backgroundColor
		queryParameters["foregroundLayer"] = foregroundLayer
		return api.createUrl("/MusicGenres/{name}/Images/{imageType}/{imageIndex}", pathParameters,
				queryParameters, includeCredentials)
	}

	/**
	 * Get person image by name.
	 *
	 * @param name Person name.
	 * @param imageType Image type.
	 * @param tag Optional. Supply the cache tag from the item object to receive strong caching
	 * headers.
	 * @param format Determines the output format of the image - original,gif,jpg,png.
	 * @param maxWidth The maximum image width to return.
	 * @param maxHeight The maximum image height to return.
	 * @param percentPlayed Optional. Percent to render for the percent played overlay.
	 * @param unplayedCount Optional. Unplayed count overlay to render.
	 * @param width The fixed image width to return.
	 * @param height The fixed image height to return.
	 * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most
	 * cases.
	 * @param fillWidth Width of box to fill.
	 * @param fillHeight Height of box to fill.
	 * @param cropWhitespace Optional. Specify if whitespace should be cropped out of the image.
	 * True/False. If unspecified, whitespace will be cropped from logos and clear art.
	 * @param addPlayedIndicator Optional. Add a played indicator.
	 * @param blur Optional. Blur image.
	 * @param backgroundColor Optional. Apply a background color for transparent images.
	 * @param foregroundLayer Optional. Apply a foreground layer on top of the image.
	 * @param imageIndex Image index.
	 */
	public suspend fun getPersonImage(
		name: String,
		imageType: ImageType,
		tag: String? = null,
		format: ImageFormat? = null,
		maxWidth: Int? = null,
		maxHeight: Int? = null,
		percentPlayed: Double? = null,
		unplayedCount: Int? = null,
		width: Int? = null,
		height: Int? = null,
		quality: Int? = null,
		fillWidth: Int? = null,
		fillHeight: Int? = null,
		cropWhitespace: Boolean? = null,
		addPlayedIndicator: Boolean? = null,
		blur: Int? = null,
		backgroundColor: String? = null,
		foregroundLayer: String? = null,
		imageIndex: Int? = null
	): Response<ByteReadChannel> {
		val pathParameters = mutableMapOf<String, Any?>()
		pathParameters["name"] = name
		pathParameters["imageType"] = imageType
		val queryParameters = mutableMapOf<String, Any?>()
		queryParameters["tag"] = tag
		queryParameters["format"] = format
		queryParameters["maxWidth"] = maxWidth
		queryParameters["maxHeight"] = maxHeight
		queryParameters["percentPlayed"] = percentPlayed
		queryParameters["unplayedCount"] = unplayedCount
		queryParameters["width"] = width
		queryParameters["height"] = height
		queryParameters["quality"] = quality
		queryParameters["fillWidth"] = fillWidth
		queryParameters["fillHeight"] = fillHeight
		queryParameters["cropWhitespace"] = cropWhitespace
		queryParameters["addPlayedIndicator"] = addPlayedIndicator
		queryParameters["blur"] = blur
		queryParameters["backgroundColor"] = backgroundColor
		queryParameters["foregroundLayer"] = foregroundLayer
		queryParameters["imageIndex"] = imageIndex
		val data = null
		val response = api.`get`<ByteReadChannel>("/Persons/{name}/Images/{imageType}", pathParameters,
				queryParameters, data)
		return response
	}

	/**
	 * Get person image by name.
	 *
	 * @param name Person name.
	 * @param imageType Image type.
	 * @param tag Optional. Supply the cache tag from the item object to receive strong caching
	 * headers.
	 * @param format Determines the output format of the image - original,gif,jpg,png.
	 * @param maxWidth The maximum image width to return.
	 * @param maxHeight The maximum image height to return.
	 * @param percentPlayed Optional. Percent to render for the percent played overlay.
	 * @param unplayedCount Optional. Unplayed count overlay to render.
	 * @param width The fixed image width to return.
	 * @param height The fixed image height to return.
	 * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most
	 * cases.
	 * @param fillWidth Width of box to fill.
	 * @param fillHeight Height of box to fill.
	 * @param cropWhitespace Optional. Specify if whitespace should be cropped out of the image.
	 * True/False. If unspecified, whitespace will be cropped from logos and clear art.
	 * @param addPlayedIndicator Optional. Add a played indicator.
	 * @param blur Optional. Blur image.
	 * @param backgroundColor Optional. Apply a background color for transparent images.
	 * @param foregroundLayer Optional. Apply a foreground layer on top of the image.
	 * @param imageIndex Image index.
	 * @param includeCredentials Add the access token to the url to make an authenticated request.
	 */
	public fun getPersonImageUrl(
		name: String,
		imageType: ImageType,
		tag: String? = null,
		format: ImageFormat? = null,
		maxWidth: Int? = null,
		maxHeight: Int? = null,
		percentPlayed: Double? = null,
		unplayedCount: Int? = null,
		width: Int? = null,
		height: Int? = null,
		quality: Int? = null,
		fillWidth: Int? = null,
		fillHeight: Int? = null,
		cropWhitespace: Boolean? = null,
		addPlayedIndicator: Boolean? = null,
		blur: Int? = null,
		backgroundColor: String? = null,
		foregroundLayer: String? = null,
		imageIndex: Int? = null,
		includeCredentials: Boolean = false
	): String {
		val pathParameters = mutableMapOf<String, Any?>()
		pathParameters["name"] = name
		pathParameters["imageType"] = imageType
		val queryParameters = mutableMapOf<String, Any?>()
		queryParameters["tag"] = tag
		queryParameters["format"] = format
		queryParameters["maxWidth"] = maxWidth
		queryParameters["maxHeight"] = maxHeight
		queryParameters["percentPlayed"] = percentPlayed
		queryParameters["unplayedCount"] = unplayedCount
		queryParameters["width"] = width
		queryParameters["height"] = height
		queryParameters["quality"] = quality
		queryParameters["fillWidth"] = fillWidth
		queryParameters["fillHeight"] = fillHeight
		queryParameters["cropWhitespace"] = cropWhitespace
		queryParameters["addPlayedIndicator"] = addPlayedIndicator
		queryParameters["blur"] = blur
		queryParameters["backgroundColor"] = backgroundColor
		queryParameters["foregroundLayer"] = foregroundLayer
		queryParameters["imageIndex"] = imageIndex
		return api.createUrl("/Persons/{name}/Images/{imageType}", pathParameters, queryParameters,
				includeCredentials)
	}

	/**
	 * Get person image by name.
	 *
	 * @param name Person name.
	 * @param imageType Image type.
	 * @param imageIndex Image index.
	 * @param tag Optional. Supply the cache tag from the item object to receive strong caching
	 * headers.
	 * @param format Determines the output format of the image - original,gif,jpg,png.
	 * @param maxWidth The maximum image width to return.
	 * @param maxHeight The maximum image height to return.
	 * @param percentPlayed Optional. Percent to render for the percent played overlay.
	 * @param unplayedCount Optional. Unplayed count overlay to render.
	 * @param width The fixed image width to return.
	 * @param height The fixed image height to return.
	 * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most
	 * cases.
	 * @param fillWidth Width of box to fill.
	 * @param fillHeight Height of box to fill.
	 * @param cropWhitespace Optional. Specify if whitespace should be cropped out of the image.
	 * True/False. If unspecified, whitespace will be cropped from logos and clear art.
	 * @param addPlayedIndicator Optional. Add a played indicator.
	 * @param blur Optional. Blur image.
	 * @param backgroundColor Optional. Apply a background color for transparent images.
	 * @param foregroundLayer Optional. Apply a foreground layer on top of the image.
	 */
	public suspend fun getPersonImageByIndex(
		name: String,
		imageType: ImageType,
		imageIndex: Int,
		tag: String? = null,
		format: ImageFormat? = null,
		maxWidth: Int? = null,
		maxHeight: Int? = null,
		percentPlayed: Double? = null,
		unplayedCount: Int? = null,
		width: Int? = null,
		height: Int? = null,
		quality: Int? = null,
		fillWidth: Int? = null,
		fillHeight: Int? = null,
		cropWhitespace: Boolean? = null,
		addPlayedIndicator: Boolean? = null,
		blur: Int? = null,
		backgroundColor: String? = null,
		foregroundLayer: String? = null
	): Response<ByteReadChannel> {
		val pathParameters = mutableMapOf<String, Any?>()
		pathParameters["name"] = name
		pathParameters["imageType"] = imageType
		pathParameters["imageIndex"] = imageIndex
		val queryParameters = mutableMapOf<String, Any?>()
		queryParameters["tag"] = tag
		queryParameters["format"] = format
		queryParameters["maxWidth"] = maxWidth
		queryParameters["maxHeight"] = maxHeight
		queryParameters["percentPlayed"] = percentPlayed
		queryParameters["unplayedCount"] = unplayedCount
		queryParameters["width"] = width
		queryParameters["height"] = height
		queryParameters["quality"] = quality
		queryParameters["fillWidth"] = fillWidth
		queryParameters["fillHeight"] = fillHeight
		queryParameters["cropWhitespace"] = cropWhitespace
		queryParameters["addPlayedIndicator"] = addPlayedIndicator
		queryParameters["blur"] = blur
		queryParameters["backgroundColor"] = backgroundColor
		queryParameters["foregroundLayer"] = foregroundLayer
		val data = null
		val response = api.`get`<ByteReadChannel>("/Persons/{name}/Images/{imageType}/{imageIndex}",
				pathParameters, queryParameters, data)
		return response
	}

	/**
	 * Get person image by name.
	 *
	 * @param name Person name.
	 * @param imageType Image type.
	 * @param imageIndex Image index.
	 * @param tag Optional. Supply the cache tag from the item object to receive strong caching
	 * headers.
	 * @param format Determines the output format of the image - original,gif,jpg,png.
	 * @param maxWidth The maximum image width to return.
	 * @param maxHeight The maximum image height to return.
	 * @param percentPlayed Optional. Percent to render for the percent played overlay.
	 * @param unplayedCount Optional. Unplayed count overlay to render.
	 * @param width The fixed image width to return.
	 * @param height The fixed image height to return.
	 * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most
	 * cases.
	 * @param fillWidth Width of box to fill.
	 * @param fillHeight Height of box to fill.
	 * @param cropWhitespace Optional. Specify if whitespace should be cropped out of the image.
	 * True/False. If unspecified, whitespace will be cropped from logos and clear art.
	 * @param addPlayedIndicator Optional. Add a played indicator.
	 * @param blur Optional. Blur image.
	 * @param backgroundColor Optional. Apply a background color for transparent images.
	 * @param foregroundLayer Optional. Apply a foreground layer on top of the image.
	 * @param includeCredentials Add the access token to the url to make an authenticated request.
	 */
	public fun getPersonImageByIndexUrl(
		name: String,
		imageType: ImageType,
		imageIndex: Int,
		tag: String? = null,
		format: ImageFormat? = null,
		maxWidth: Int? = null,
		maxHeight: Int? = null,
		percentPlayed: Double? = null,
		unplayedCount: Int? = null,
		width: Int? = null,
		height: Int? = null,
		quality: Int? = null,
		fillWidth: Int? = null,
		fillHeight: Int? = null,
		cropWhitespace: Boolean? = null,
		addPlayedIndicator: Boolean? = null,
		blur: Int? = null,
		backgroundColor: String? = null,
		foregroundLayer: String? = null,
		includeCredentials: Boolean = false
	): String {
		val pathParameters = mutableMapOf<String, Any?>()
		pathParameters["name"] = name
		pathParameters["imageType"] = imageType
		pathParameters["imageIndex"] = imageIndex
		val queryParameters = mutableMapOf<String, Any?>()
		queryParameters["tag"] = tag
		queryParameters["format"] = format
		queryParameters["maxWidth"] = maxWidth
		queryParameters["maxHeight"] = maxHeight
		queryParameters["percentPlayed"] = percentPlayed
		queryParameters["unplayedCount"] = unplayedCount
		queryParameters["width"] = width
		queryParameters["height"] = height
		queryParameters["quality"] = quality
		queryParameters["fillWidth"] = fillWidth
		queryParameters["fillHeight"] = fillHeight
		queryParameters["cropWhitespace"] = cropWhitespace
		queryParameters["addPlayedIndicator"] = addPlayedIndicator
		queryParameters["blur"] = blur
		queryParameters["backgroundColor"] = backgroundColor
		queryParameters["foregroundLayer"] = foregroundLayer
		return api.createUrl("/Persons/{name}/Images/{imageType}/{imageIndex}", pathParameters,
				queryParameters, includeCredentials)
	}

	/**
	 * Get studio image by name.
	 *
	 * @param name Studio name.
	 * @param imageType Image type.
	 * @param tag Optional. Supply the cache tag from the item object to receive strong caching
	 * headers.
	 * @param format Determines the output format of the image - original,gif,jpg,png.
	 * @param maxWidth The maximum image width to return.
	 * @param maxHeight The maximum image height to return.
	 * @param percentPlayed Optional. Percent to render for the percent played overlay.
	 * @param unplayedCount Optional. Unplayed count overlay to render.
	 * @param width The fixed image width to return.
	 * @param height The fixed image height to return.
	 * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most
	 * cases.
	 * @param fillWidth Width of box to fill.
	 * @param fillHeight Height of box to fill.
	 * @param cropWhitespace Optional. Specify if whitespace should be cropped out of the image.
	 * True/False. If unspecified, whitespace will be cropped from logos and clear art.
	 * @param addPlayedIndicator Optional. Add a played indicator.
	 * @param blur Optional. Blur image.
	 * @param backgroundColor Optional. Apply a background color for transparent images.
	 * @param foregroundLayer Optional. Apply a foreground layer on top of the image.
	 * @param imageIndex Image index.
	 */
	public suspend fun getStudioImage(
		name: String,
		imageType: ImageType,
		tag: String? = null,
		format: ImageFormat? = null,
		maxWidth: Int? = null,
		maxHeight: Int? = null,
		percentPlayed: Double? = null,
		unplayedCount: Int? = null,
		width: Int? = null,
		height: Int? = null,
		quality: Int? = null,
		fillWidth: Int? = null,
		fillHeight: Int? = null,
		cropWhitespace: Boolean? = null,
		addPlayedIndicator: Boolean? = null,
		blur: Int? = null,
		backgroundColor: String? = null,
		foregroundLayer: String? = null,
		imageIndex: Int? = null
	): Response<ByteReadChannel> {
		val pathParameters = mutableMapOf<String, Any?>()
		pathParameters["name"] = name
		pathParameters["imageType"] = imageType
		val queryParameters = mutableMapOf<String, Any?>()
		queryParameters["tag"] = tag
		queryParameters["format"] = format
		queryParameters["maxWidth"] = maxWidth
		queryParameters["maxHeight"] = maxHeight
		queryParameters["percentPlayed"] = percentPlayed
		queryParameters["unplayedCount"] = unplayedCount
		queryParameters["width"] = width
		queryParameters["height"] = height
		queryParameters["quality"] = quality
		queryParameters["fillWidth"] = fillWidth
		queryParameters["fillHeight"] = fillHeight
		queryParameters["cropWhitespace"] = cropWhitespace
		queryParameters["addPlayedIndicator"] = addPlayedIndicator
		queryParameters["blur"] = blur
		queryParameters["backgroundColor"] = backgroundColor
		queryParameters["foregroundLayer"] = foregroundLayer
		queryParameters["imageIndex"] = imageIndex
		val data = null
		val response = api.`get`<ByteReadChannel>("/Studios/{name}/Images/{imageType}", pathParameters,
				queryParameters, data)
		return response
	}

	/**
	 * Get studio image by name.
	 *
	 * @param name Studio name.
	 * @param imageType Image type.
	 * @param tag Optional. Supply the cache tag from the item object to receive strong caching
	 * headers.
	 * @param format Determines the output format of the image - original,gif,jpg,png.
	 * @param maxWidth The maximum image width to return.
	 * @param maxHeight The maximum image height to return.
	 * @param percentPlayed Optional. Percent to render for the percent played overlay.
	 * @param unplayedCount Optional. Unplayed count overlay to render.
	 * @param width The fixed image width to return.
	 * @param height The fixed image height to return.
	 * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most
	 * cases.
	 * @param fillWidth Width of box to fill.
	 * @param fillHeight Height of box to fill.
	 * @param cropWhitespace Optional. Specify if whitespace should be cropped out of the image.
	 * True/False. If unspecified, whitespace will be cropped from logos and clear art.
	 * @param addPlayedIndicator Optional. Add a played indicator.
	 * @param blur Optional. Blur image.
	 * @param backgroundColor Optional. Apply a background color for transparent images.
	 * @param foregroundLayer Optional. Apply a foreground layer on top of the image.
	 * @param imageIndex Image index.
	 * @param includeCredentials Add the access token to the url to make an authenticated request.
	 */
	public fun getStudioImageUrl(
		name: String,
		imageType: ImageType,
		tag: String? = null,
		format: ImageFormat? = null,
		maxWidth: Int? = null,
		maxHeight: Int? = null,
		percentPlayed: Double? = null,
		unplayedCount: Int? = null,
		width: Int? = null,
		height: Int? = null,
		quality: Int? = null,
		fillWidth: Int? = null,
		fillHeight: Int? = null,
		cropWhitespace: Boolean? = null,
		addPlayedIndicator: Boolean? = null,
		blur: Int? = null,
		backgroundColor: String? = null,
		foregroundLayer: String? = null,
		imageIndex: Int? = null,
		includeCredentials: Boolean = false
	): String {
		val pathParameters = mutableMapOf<String, Any?>()
		pathParameters["name"] = name
		pathParameters["imageType"] = imageType
		val queryParameters = mutableMapOf<String, Any?>()
		queryParameters["tag"] = tag
		queryParameters["format"] = format
		queryParameters["maxWidth"] = maxWidth
		queryParameters["maxHeight"] = maxHeight
		queryParameters["percentPlayed"] = percentPlayed
		queryParameters["unplayedCount"] = unplayedCount
		queryParameters["width"] = width
		queryParameters["height"] = height
		queryParameters["quality"] = quality
		queryParameters["fillWidth"] = fillWidth
		queryParameters["fillHeight"] = fillHeight
		queryParameters["cropWhitespace"] = cropWhitespace
		queryParameters["addPlayedIndicator"] = addPlayedIndicator
		queryParameters["blur"] = blur
		queryParameters["backgroundColor"] = backgroundColor
		queryParameters["foregroundLayer"] = foregroundLayer
		queryParameters["imageIndex"] = imageIndex
		return api.createUrl("/Studios/{name}/Images/{imageType}", pathParameters, queryParameters,
				includeCredentials)
	}

	/**
	 * Get studio image by name.
	 *
	 * @param name Studio name.
	 * @param imageType Image type.
	 * @param imageIndex Image index.
	 * @param tag Optional. Supply the cache tag from the item object to receive strong caching
	 * headers.
	 * @param format Determines the output format of the image - original,gif,jpg,png.
	 * @param maxWidth The maximum image width to return.
	 * @param maxHeight The maximum image height to return.
	 * @param percentPlayed Optional. Percent to render for the percent played overlay.
	 * @param unplayedCount Optional. Unplayed count overlay to render.
	 * @param width The fixed image width to return.
	 * @param height The fixed image height to return.
	 * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most
	 * cases.
	 * @param fillWidth Width of box to fill.
	 * @param fillHeight Height of box to fill.
	 * @param cropWhitespace Optional. Specify if whitespace should be cropped out of the image.
	 * True/False. If unspecified, whitespace will be cropped from logos and clear art.
	 * @param addPlayedIndicator Optional. Add a played indicator.
	 * @param blur Optional. Blur image.
	 * @param backgroundColor Optional. Apply a background color for transparent images.
	 * @param foregroundLayer Optional. Apply a foreground layer on top of the image.
	 */
	public suspend fun getStudioImageByIndex(
		name: String,
		imageType: ImageType,
		imageIndex: Int,
		tag: String? = null,
		format: ImageFormat? = null,
		maxWidth: Int? = null,
		maxHeight: Int? = null,
		percentPlayed: Double? = null,
		unplayedCount: Int? = null,
		width: Int? = null,
		height: Int? = null,
		quality: Int? = null,
		fillWidth: Int? = null,
		fillHeight: Int? = null,
		cropWhitespace: Boolean? = null,
		addPlayedIndicator: Boolean? = null,
		blur: Int? = null,
		backgroundColor: String? = null,
		foregroundLayer: String? = null
	): Response<ByteReadChannel> {
		val pathParameters = mutableMapOf<String, Any?>()
		pathParameters["name"] = name
		pathParameters["imageType"] = imageType
		pathParameters["imageIndex"] = imageIndex
		val queryParameters = mutableMapOf<String, Any?>()
		queryParameters["tag"] = tag
		queryParameters["format"] = format
		queryParameters["maxWidth"] = maxWidth
		queryParameters["maxHeight"] = maxHeight
		queryParameters["percentPlayed"] = percentPlayed
		queryParameters["unplayedCount"] = unplayedCount
		queryParameters["width"] = width
		queryParameters["height"] = height
		queryParameters["quality"] = quality
		queryParameters["fillWidth"] = fillWidth
		queryParameters["fillHeight"] = fillHeight
		queryParameters["cropWhitespace"] = cropWhitespace
		queryParameters["addPlayedIndicator"] = addPlayedIndicator
		queryParameters["blur"] = blur
		queryParameters["backgroundColor"] = backgroundColor
		queryParameters["foregroundLayer"] = foregroundLayer
		val data = null
		val response = api.`get`<ByteReadChannel>("/Studios/{name}/Images/{imageType}/{imageIndex}",
				pathParameters, queryParameters, data)
		return response
	}

	/**
	 * Get studio image by name.
	 *
	 * @param name Studio name.
	 * @param imageType Image type.
	 * @param imageIndex Image index.
	 * @param tag Optional. Supply the cache tag from the item object to receive strong caching
	 * headers.
	 * @param format Determines the output format of the image - original,gif,jpg,png.
	 * @param maxWidth The maximum image width to return.
	 * @param maxHeight The maximum image height to return.
	 * @param percentPlayed Optional. Percent to render for the percent played overlay.
	 * @param unplayedCount Optional. Unplayed count overlay to render.
	 * @param width The fixed image width to return.
	 * @param height The fixed image height to return.
	 * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most
	 * cases.
	 * @param fillWidth Width of box to fill.
	 * @param fillHeight Height of box to fill.
	 * @param cropWhitespace Optional. Specify if whitespace should be cropped out of the image.
	 * True/False. If unspecified, whitespace will be cropped from logos and clear art.
	 * @param addPlayedIndicator Optional. Add a played indicator.
	 * @param blur Optional. Blur image.
	 * @param backgroundColor Optional. Apply a background color for transparent images.
	 * @param foregroundLayer Optional. Apply a foreground layer on top of the image.
	 * @param includeCredentials Add the access token to the url to make an authenticated request.
	 */
	public fun getStudioImageByIndexUrl(
		name: String,
		imageType: ImageType,
		imageIndex: Int,
		tag: String? = null,
		format: ImageFormat? = null,
		maxWidth: Int? = null,
		maxHeight: Int? = null,
		percentPlayed: Double? = null,
		unplayedCount: Int? = null,
		width: Int? = null,
		height: Int? = null,
		quality: Int? = null,
		fillWidth: Int? = null,
		fillHeight: Int? = null,
		cropWhitespace: Boolean? = null,
		addPlayedIndicator: Boolean? = null,
		blur: Int? = null,
		backgroundColor: String? = null,
		foregroundLayer: String? = null,
		includeCredentials: Boolean = false
	): String {
		val pathParameters = mutableMapOf<String, Any?>()
		pathParameters["name"] = name
		pathParameters["imageType"] = imageType
		pathParameters["imageIndex"] = imageIndex
		val queryParameters = mutableMapOf<String, Any?>()
		queryParameters["tag"] = tag
		queryParameters["format"] = format
		queryParameters["maxWidth"] = maxWidth
		queryParameters["maxHeight"] = maxHeight
		queryParameters["percentPlayed"] = percentPlayed
		queryParameters["unplayedCount"] = unplayedCount
		queryParameters["width"] = width
		queryParameters["height"] = height
		queryParameters["quality"] = quality
		queryParameters["fillWidth"] = fillWidth
		queryParameters["fillHeight"] = fillHeight
		queryParameters["cropWhitespace"] = cropWhitespace
		queryParameters["addPlayedIndicator"] = addPlayedIndicator
		queryParameters["blur"] = blur
		queryParameters["backgroundColor"] = backgroundColor
		queryParameters["foregroundLayer"] = foregroundLayer
		return api.createUrl("/Studios/{name}/Images/{imageType}/{imageIndex}", pathParameters,
				queryParameters, includeCredentials)
	}

	/**
	 * Get user profile image.
	 *
	 * @param userId User id.
	 * @param imageType Image type.
	 * @param tag Optional. Supply the cache tag from the item object to receive strong caching
	 * headers.
	 * @param format Determines the output format of the image - original,gif,jpg,png.
	 * @param maxWidth The maximum image width to return.
	 * @param maxHeight The maximum image height to return.
	 * @param percentPlayed Optional. Percent to render for the percent played overlay.
	 * @param unplayedCount Optional. Unplayed count overlay to render.
	 * @param width The fixed image width to return.
	 * @param height The fixed image height to return.
	 * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most
	 * cases.
	 * @param fillWidth Width of box to fill.
	 * @param fillHeight Height of box to fill.
	 * @param cropWhitespace Optional. Specify if whitespace should be cropped out of the image.
	 * True/False. If unspecified, whitespace will be cropped from logos and clear art.
	 * @param addPlayedIndicator Optional. Add a played indicator.
	 * @param blur Optional. Blur image.
	 * @param backgroundColor Optional. Apply a background color for transparent images.
	 * @param foregroundLayer Optional. Apply a foreground layer on top of the image.
	 * @param imageIndex Image index.
	 */
	public suspend fun getUserImage(
		userId: UUID = api.userId ?: throw MissingUserIdException(),
		imageType: ImageType,
		tag: String? = null,
		format: ImageFormat? = null,
		maxWidth: Int? = null,
		maxHeight: Int? = null,
		percentPlayed: Double? = null,
		unplayedCount: Int? = null,
		width: Int? = null,
		height: Int? = null,
		quality: Int? = null,
		fillWidth: Int? = null,
		fillHeight: Int? = null,
		cropWhitespace: Boolean? = null,
		addPlayedIndicator: Boolean? = null,
		blur: Int? = null,
		backgroundColor: String? = null,
		foregroundLayer: String? = null,
		imageIndex: Int? = null
	): Response<ByteReadChannel> {
		val pathParameters = mutableMapOf<String, Any?>()
		pathParameters["userId"] = userId
		pathParameters["imageType"] = imageType
		val queryParameters = mutableMapOf<String, Any?>()
		queryParameters["tag"] = tag
		queryParameters["format"] = format
		queryParameters["maxWidth"] = maxWidth
		queryParameters["maxHeight"] = maxHeight
		queryParameters["percentPlayed"] = percentPlayed
		queryParameters["unplayedCount"] = unplayedCount
		queryParameters["width"] = width
		queryParameters["height"] = height
		queryParameters["quality"] = quality
		queryParameters["fillWidth"] = fillWidth
		queryParameters["fillHeight"] = fillHeight
		queryParameters["cropWhitespace"] = cropWhitespace
		queryParameters["addPlayedIndicator"] = addPlayedIndicator
		queryParameters["blur"] = blur
		queryParameters["backgroundColor"] = backgroundColor
		queryParameters["foregroundLayer"] = foregroundLayer
		queryParameters["imageIndex"] = imageIndex
		val data = null
		val response = api.`get`<ByteReadChannel>("/Users/{userId}/Images/{imageType}", pathParameters,
				queryParameters, data)
		return response
	}

	/**
	 * Get user profile image.
	 *
	 * @param userId User id.
	 * @param imageType Image type.
	 * @param tag Optional. Supply the cache tag from the item object to receive strong caching
	 * headers.
	 * @param format Determines the output format of the image - original,gif,jpg,png.
	 * @param maxWidth The maximum image width to return.
	 * @param maxHeight The maximum image height to return.
	 * @param percentPlayed Optional. Percent to render for the percent played overlay.
	 * @param unplayedCount Optional. Unplayed count overlay to render.
	 * @param width The fixed image width to return.
	 * @param height The fixed image height to return.
	 * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most
	 * cases.
	 * @param fillWidth Width of box to fill.
	 * @param fillHeight Height of box to fill.
	 * @param cropWhitespace Optional. Specify if whitespace should be cropped out of the image.
	 * True/False. If unspecified, whitespace will be cropped from logos and clear art.
	 * @param addPlayedIndicator Optional. Add a played indicator.
	 * @param blur Optional. Blur image.
	 * @param backgroundColor Optional. Apply a background color for transparent images.
	 * @param foregroundLayer Optional. Apply a foreground layer on top of the image.
	 * @param imageIndex Image index.
	 * @param includeCredentials Add the access token to the url to make an authenticated request.
	 */
	public fun getUserImageUrl(
		userId: UUID = api.userId ?: throw MissingUserIdException(),
		imageType: ImageType,
		tag: String? = null,
		format: ImageFormat? = null,
		maxWidth: Int? = null,
		maxHeight: Int? = null,
		percentPlayed: Double? = null,
		unplayedCount: Int? = null,
		width: Int? = null,
		height: Int? = null,
		quality: Int? = null,
		fillWidth: Int? = null,
		fillHeight: Int? = null,
		cropWhitespace: Boolean? = null,
		addPlayedIndicator: Boolean? = null,
		blur: Int? = null,
		backgroundColor: String? = null,
		foregroundLayer: String? = null,
		imageIndex: Int? = null,
		includeCredentials: Boolean = false
	): String {
		val pathParameters = mutableMapOf<String, Any?>()
		pathParameters["userId"] = userId
		pathParameters["imageType"] = imageType
		val queryParameters = mutableMapOf<String, Any?>()
		queryParameters["tag"] = tag
		queryParameters["format"] = format
		queryParameters["maxWidth"] = maxWidth
		queryParameters["maxHeight"] = maxHeight
		queryParameters["percentPlayed"] = percentPlayed
		queryParameters["unplayedCount"] = unplayedCount
		queryParameters["width"] = width
		queryParameters["height"] = height
		queryParameters["quality"] = quality
		queryParameters["fillWidth"] = fillWidth
		queryParameters["fillHeight"] = fillHeight
		queryParameters["cropWhitespace"] = cropWhitespace
		queryParameters["addPlayedIndicator"] = addPlayedIndicator
		queryParameters["blur"] = blur
		queryParameters["backgroundColor"] = backgroundColor
		queryParameters["foregroundLayer"] = foregroundLayer
		queryParameters["imageIndex"] = imageIndex
		return api.createUrl("/Users/{userId}/Images/{imageType}", pathParameters, queryParameters,
				includeCredentials)
	}

	/**
	 * Get user profile image.
	 *
	 * @param userId User id.
	 * @param imageType Image type.
	 * @param imageIndex Image index.
	 * @param tag Optional. Supply the cache tag from the item object to receive strong caching
	 * headers.
	 * @param format Determines the output format of the image - original,gif,jpg,png.
	 * @param maxWidth The maximum image width to return.
	 * @param maxHeight The maximum image height to return.
	 * @param percentPlayed Optional. Percent to render for the percent played overlay.
	 * @param unplayedCount Optional. Unplayed count overlay to render.
	 * @param width The fixed image width to return.
	 * @param height The fixed image height to return.
	 * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most
	 * cases.
	 * @param fillWidth Width of box to fill.
	 * @param fillHeight Height of box to fill.
	 * @param cropWhitespace Optional. Specify if whitespace should be cropped out of the image.
	 * True/False. If unspecified, whitespace will be cropped from logos and clear art.
	 * @param addPlayedIndicator Optional. Add a played indicator.
	 * @param blur Optional. Blur image.
	 * @param backgroundColor Optional. Apply a background color for transparent images.
	 * @param foregroundLayer Optional. Apply a foreground layer on top of the image.
	 */
	public suspend fun getUserImageByIndex(
		userId: UUID = api.userId ?: throw MissingUserIdException(),
		imageType: ImageType,
		imageIndex: Int,
		tag: String? = null,
		format: ImageFormat? = null,
		maxWidth: Int? = null,
		maxHeight: Int? = null,
		percentPlayed: Double? = null,
		unplayedCount: Int? = null,
		width: Int? = null,
		height: Int? = null,
		quality: Int? = null,
		fillWidth: Int? = null,
		fillHeight: Int? = null,
		cropWhitespace: Boolean? = null,
		addPlayedIndicator: Boolean? = null,
		blur: Int? = null,
		backgroundColor: String? = null,
		foregroundLayer: String? = null
	): Response<ByteReadChannel> {
		val pathParameters = mutableMapOf<String, Any?>()
		pathParameters["userId"] = userId
		pathParameters["imageType"] = imageType
		pathParameters["imageIndex"] = imageIndex
		val queryParameters = mutableMapOf<String, Any?>()
		queryParameters["tag"] = tag
		queryParameters["format"] = format
		queryParameters["maxWidth"] = maxWidth
		queryParameters["maxHeight"] = maxHeight
		queryParameters["percentPlayed"] = percentPlayed
		queryParameters["unplayedCount"] = unplayedCount
		queryParameters["width"] = width
		queryParameters["height"] = height
		queryParameters["quality"] = quality
		queryParameters["fillWidth"] = fillWidth
		queryParameters["fillHeight"] = fillHeight
		queryParameters["cropWhitespace"] = cropWhitespace
		queryParameters["addPlayedIndicator"] = addPlayedIndicator
		queryParameters["blur"] = blur
		queryParameters["backgroundColor"] = backgroundColor
		queryParameters["foregroundLayer"] = foregroundLayer
		val data = null
		val response = api.`get`<ByteReadChannel>("/Users/{userId}/Images/{imageType}/{imageIndex}",
				pathParameters, queryParameters, data)
		return response
	}

	/**
	 * Get user profile image.
	 *
	 * @param userId User id.
	 * @param imageType Image type.
	 * @param imageIndex Image index.
	 * @param tag Optional. Supply the cache tag from the item object to receive strong caching
	 * headers.
	 * @param format Determines the output format of the image - original,gif,jpg,png.
	 * @param maxWidth The maximum image width to return.
	 * @param maxHeight The maximum image height to return.
	 * @param percentPlayed Optional. Percent to render for the percent played overlay.
	 * @param unplayedCount Optional. Unplayed count overlay to render.
	 * @param width The fixed image width to return.
	 * @param height The fixed image height to return.
	 * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most
	 * cases.
	 * @param fillWidth Width of box to fill.
	 * @param fillHeight Height of box to fill.
	 * @param cropWhitespace Optional. Specify if whitespace should be cropped out of the image.
	 * True/False. If unspecified, whitespace will be cropped from logos and clear art.
	 * @param addPlayedIndicator Optional. Add a played indicator.
	 * @param blur Optional. Blur image.
	 * @param backgroundColor Optional. Apply a background color for transparent images.
	 * @param foregroundLayer Optional. Apply a foreground layer on top of the image.
	 * @param includeCredentials Add the access token to the url to make an authenticated request.
	 */
	public fun getUserImageByIndexUrl(
		userId: UUID = api.userId ?: throw MissingUserIdException(),
		imageType: ImageType,
		imageIndex: Int,
		tag: String? = null,
		format: ImageFormat? = null,
		maxWidth: Int? = null,
		maxHeight: Int? = null,
		percentPlayed: Double? = null,
		unplayedCount: Int? = null,
		width: Int? = null,
		height: Int? = null,
		quality: Int? = null,
		fillWidth: Int? = null,
		fillHeight: Int? = null,
		cropWhitespace: Boolean? = null,
		addPlayedIndicator: Boolean? = null,
		blur: Int? = null,
		backgroundColor: String? = null,
		foregroundLayer: String? = null,
		includeCredentials: Boolean = false
	): String {
		val pathParameters = mutableMapOf<String, Any?>()
		pathParameters["userId"] = userId
		pathParameters["imageType"] = imageType
		pathParameters["imageIndex"] = imageIndex
		val queryParameters = mutableMapOf<String, Any?>()
		queryParameters["tag"] = tag
		queryParameters["format"] = format
		queryParameters["maxWidth"] = maxWidth
		queryParameters["maxHeight"] = maxHeight
		queryParameters["percentPlayed"] = percentPlayed
		queryParameters["unplayedCount"] = unplayedCount
		queryParameters["width"] = width
		queryParameters["height"] = height
		queryParameters["quality"] = quality
		queryParameters["fillWidth"] = fillWidth
		queryParameters["fillHeight"] = fillHeight
		queryParameters["cropWhitespace"] = cropWhitespace
		queryParameters["addPlayedIndicator"] = addPlayedIndicator
		queryParameters["blur"] = blur
		queryParameters["backgroundColor"] = backgroundColor
		queryParameters["foregroundLayer"] = foregroundLayer
		return api.createUrl("/Users/{userId}/Images/{imageType}/{imageIndex}", pathParameters,
				queryParameters, includeCredentials)
	}

	/**
	 * Sets the user image.
	 *
	 * @param userId User Id.
	 * @param imageType (Unused) Image type.
	 * @param index (Unused) Image index.
	 */
	public suspend fun postUserImage(
		userId: UUID = api.userId ?: throw MissingUserIdException(),
		imageType: ImageType,
		index: Int? = null
	): Response<Unit> {
		val pathParameters = mutableMapOf<String, Any?>()
		pathParameters["userId"] = userId
		pathParameters["imageType"] = imageType
		val queryParameters = mutableMapOf<String, Any?>()
		queryParameters["index"] = index
		val data = null
		val response = api.post<Unit>("/Users/{userId}/Images/{imageType}", pathParameters,
				queryParameters, data)
		return response
	}

	/**
	 * Sets the user image.
	 *
	 * @param userId User Id.
	 * @param imageType (Unused) Image type.
	 * @param index (Unused) Image index.
	 */
	public suspend fun postUserImageByIndex(
		userId: UUID = api.userId ?: throw MissingUserIdException(),
		imageType: ImageType,
		index: Int
	): Response<Unit> {
		val pathParameters = mutableMapOf<String, Any?>()
		pathParameters["userId"] = userId
		pathParameters["imageType"] = imageType
		pathParameters["index"] = index
		val queryParameters = emptyMap<String, Any?>()
		val data = null
		val response = api.post<Unit>("/Users/{userId}/Images/{imageType}/{index}", pathParameters,
				queryParameters, data)
		return response
	}

	/**
	 * Set item image.
	 *
	 * @param itemId Item id.
	 * @param imageType Image type.
	 */
	public suspend fun setItemImage(itemId: UUID, imageType: ImageType): Response<Unit> {
		val pathParameters = mutableMapOf<String, Any?>()
		pathParameters["itemId"] = itemId
		pathParameters["imageType"] = imageType
		val queryParameters = emptyMap<String, Any?>()
		val data = null
		val response = api.post<Unit>("/Items/{itemId}/Images/{imageType}", pathParameters,
				queryParameters, data)
		return response
	}

	/**
	 * Set item image.
	 *
	 * @param itemId Item id.
	 * @param imageType Image type.
	 * @param imageIndex (Unused) Image index.
	 */
	public suspend fun setItemImageByIndex(
		itemId: UUID,
		imageType: ImageType,
		imageIndex: Int
	): Response<Unit> {
		val pathParameters = mutableMapOf<String, Any?>()
		pathParameters["itemId"] = itemId
		pathParameters["imageType"] = imageType
		pathParameters["imageIndex"] = imageIndex
		val queryParameters = emptyMap<String, Any?>()
		val data = null
		val response = api.post<Unit>("/Items/{itemId}/Images/{imageType}/{imageIndex}", pathParameters,
				queryParameters, data)
		return response
	}

	/**
	 * Updates the index for an item image.
	 *
	 * @param itemId Item id.
	 * @param imageType Image type.
	 * @param imageIndex Old image index.
	 * @param newIndex New image index.
	 */
	public suspend fun updateItemImageIndex(
		itemId: UUID,
		imageType: ImageType,
		imageIndex: Int,
		newIndex: Int
	): Response<Unit> {
		val pathParameters = mutableMapOf<String, Any?>()
		pathParameters["itemId"] = itemId
		pathParameters["imageType"] = imageType
		pathParameters["imageIndex"] = imageIndex
		val queryParameters = mutableMapOf<String, Any?>()
		queryParameters["newIndex"] = newIndex
		val data = null
		val response = api.post<Unit>("/Items/{itemId}/Images/{imageType}/{imageIndex}/Index",
				pathParameters, queryParameters, data)
		return response
	}
}
