// !!        WARNING
// !! DO NOT EDIT THIS FILE
//
// This file is generated by the openapi-generator module and is not meant for manual changes.
// Please read the README.md file in the openapi-generator module for additional information.
package org.jellyfin.sdk.api.operations

import kotlin.Any
import kotlin.String
import kotlin.Unit
import kotlin.collections.List
import kotlin.collections.buildMap
import kotlin.collections.emptyMap
import org.jellyfin.sdk.api.client.ApiClient
import org.jellyfin.sdk.api.client.Response
import org.jellyfin.sdk.api.client.extensions.`get`
import org.jellyfin.sdk.api.client.extensions.delete
import org.jellyfin.sdk.api.client.extensions.post
import org.jellyfin.sdk.model.UUID
import org.jellyfin.sdk.model.api.LyricDto
import org.jellyfin.sdk.model.api.RemoteLyricInfoDto

public class LyricsApi(
	private val api: ApiClient,
) : Api {
	/**
	 * Deletes an external lyric file.
	 *
	 * @param itemId The item id.
	 */
	public suspend fun deleteLyrics(itemId: UUID): Response<Unit> {
		val pathParameters = buildMap<String, Any?>(1) {
			put("itemId", itemId)
		}
		val queryParameters = emptyMap<String, Any?>()
		val data = null
		val response = api.delete<Unit>("/Audio/{itemId}/Lyrics", pathParameters, queryParameters, data)
		return response
	}

	/**
	 * Downloads a remote lyric.
	 *
	 * @param itemId The item id.
	 * @param lyricId The lyric id.
	 */
	public suspend fun downloadRemoteLyrics(itemId: UUID, lyricId: String): Response<LyricDto> {
		val pathParameters = buildMap<String, Any?>(2) {
			put("itemId", itemId)
			put("lyricId", lyricId)
		}
		val queryParameters = emptyMap<String, Any?>()
		val data = null
		val response = api.post<LyricDto>("/Audio/{itemId}/RemoteSearch/Lyrics/{lyricId}", pathParameters,
				queryParameters, data)
		return response
	}

	/**
	 * Gets an item's lyrics.
	 *
	 * @param itemId Item id.
	 */
	public suspend fun getLyrics(itemId: UUID): Response<LyricDto> {
		val pathParameters = buildMap<String, Any?>(1) {
			put("itemId", itemId)
		}
		val queryParameters = emptyMap<String, Any?>()
		val data = null
		val response = api.`get`<LyricDto>("/Audio/{itemId}/Lyrics", pathParameters, queryParameters,
				data)
		return response
	}

	/**
	 * Gets the remote lyrics.
	 *
	 * @param lyricId The remote provider item id.
	 */
	public suspend fun getRemoteLyrics(lyricId: String): Response<LyricDto> {
		val pathParameters = buildMap<String, Any?>(1) {
			put("lyricId", lyricId)
		}
		val queryParameters = emptyMap<String, Any?>()
		val data = null
		val response = api.`get`<LyricDto>("/Providers/Lyrics/{lyricId}", pathParameters, queryParameters,
				data)
		return response
	}

	/**
	 * Search remote lyrics.
	 *
	 * @param itemId The item id.
	 */
	public suspend fun searchRemoteLyrics(itemId: UUID): Response<List<RemoteLyricInfoDto>> {
		val pathParameters = buildMap<String, Any?>(1) {
			put("itemId", itemId)
		}
		val queryParameters = emptyMap<String, Any?>()
		val data = null
		val response = api.`get`<List<RemoteLyricInfoDto>>("/Audio/{itemId}/RemoteSearch/Lyrics",
				pathParameters, queryParameters, data)
		return response
	}

	/**
	 * Upload an external lyric file.
	 *
	 * @param itemId The item the lyric belongs to.
	 * @param fileName Name of the file being uploaded.
	 */
	public suspend fun uploadLyrics(
		itemId: UUID,
		fileName: String,
		`data`: String,
	): Response<LyricDto> {
		val pathParameters = buildMap<String, Any?>(1) {
			put("itemId", itemId)
		}
		val queryParameters = buildMap<String, Any?>(1) {
			put("fileName", fileName)
		}
		val response = api.post<LyricDto>("/Audio/{itemId}/Lyrics", pathParameters, queryParameters, data)
		return response
	}
}
