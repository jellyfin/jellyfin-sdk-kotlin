// !!        WARNING
// !! DO NOT EDIT THIS FILE
//
// This file is generated by the openapi-generator module and is not meant for manual changes.
// Please read the README.md file in the openapi-generator module for additional information.
package org.jellyfin.sdk.api.operations

import kotlin.Any
import kotlin.String
import kotlin.Unit
import kotlin.collections.List
import kotlin.collections.emptyMap
import org.jellyfin.sdk.api.client.KtorClient
import org.jellyfin.sdk.api.client.Response
import org.jellyfin.sdk.model.api.BufferRequestDto
import org.jellyfin.sdk.model.api.GroupInfoDto
import org.jellyfin.sdk.model.api.IgnoreWaitRequestDto
import org.jellyfin.sdk.model.api.JoinGroupRequestDto
import org.jellyfin.sdk.model.api.MovePlaylistItemRequestDto
import org.jellyfin.sdk.model.api.NewGroupRequestDto
import org.jellyfin.sdk.model.api.NextItemRequestDto
import org.jellyfin.sdk.model.api.PingRequestDto
import org.jellyfin.sdk.model.api.PlayRequestDto
import org.jellyfin.sdk.model.api.PreviousItemRequestDto
import org.jellyfin.sdk.model.api.QueueRequestDto
import org.jellyfin.sdk.model.api.ReadyRequestDto
import org.jellyfin.sdk.model.api.RemoveFromPlaylistRequestDto
import org.jellyfin.sdk.model.api.SeekRequestDto
import org.jellyfin.sdk.model.api.SetPlaylistItemRequestDto
import org.jellyfin.sdk.model.api.SetRepeatModeRequestDto
import org.jellyfin.sdk.model.api.SetShuffleModeRequestDto

public class SyncPlayApi(
	private val api: KtorClient
) {
	/**
	 * Notify SyncPlay group that member is buffering.
	 */
	public suspend fun syncPlayBuffering(`data`: BufferRequestDto): Response<Unit> {
		val pathParameters = emptyMap<String, Any?>()
		val queryParameters = emptyMap<String, Any?>()
		val response = api.post<Unit>("/SyncPlay/Buffering", pathParameters, queryParameters, data)
		return response
	}

	/**
	 * Create a new SyncPlay group.
	 */
	public suspend fun syncPlayCreateGroup(`data`: NewGroupRequestDto): Response<Unit> {
		val pathParameters = emptyMap<String, Any?>()
		val queryParameters = emptyMap<String, Any?>()
		val response = api.post<Unit>("/SyncPlay/New", pathParameters, queryParameters, data)
		return response
	}

	/**
	 * Gets all SyncPlay groups.
	 */
	public suspend fun syncPlayGetGroups(): Response<List<GroupInfoDto>> {
		val pathParameters = emptyMap<String, Any?>()
		val queryParameters = emptyMap<String, Any?>()
		val data = null
		val response = api.`get`<List<GroupInfoDto>>("/SyncPlay/List", pathParameters, queryParameters,
				data)
		return response
	}

	/**
	 * Join an existing SyncPlay group.
	 */
	public suspend fun syncPlayJoinGroup(`data`: JoinGroupRequestDto): Response<Unit> {
		val pathParameters = emptyMap<String, Any?>()
		val queryParameters = emptyMap<String, Any?>()
		val response = api.post<Unit>("/SyncPlay/Join", pathParameters, queryParameters, data)
		return response
	}

	/**
	 * Leave the joined SyncPlay group.
	 */
	public suspend fun syncPlayLeaveGroup(): Response<Unit> {
		val pathParameters = emptyMap<String, Any?>()
		val queryParameters = emptyMap<String, Any?>()
		val data = null
		val response = api.post<Unit>("/SyncPlay/Leave", pathParameters, queryParameters, data)
		return response
	}

	/**
	 * Request to move an item in the playlist in SyncPlay group.
	 */
	public suspend fun syncPlayMovePlaylistItem(`data`: MovePlaylistItemRequestDto): Response<Unit> {
		val pathParameters = emptyMap<String, Any?>()
		val queryParameters = emptyMap<String, Any?>()
		val response = api.post<Unit>("/SyncPlay/MovePlaylistItem", pathParameters, queryParameters, data)
		return response
	}

	/**
	 * Request next item in SyncPlay group.
	 */
	public suspend fun syncPlayNextItem(`data`: NextItemRequestDto): Response<Unit> {
		val pathParameters = emptyMap<String, Any?>()
		val queryParameters = emptyMap<String, Any?>()
		val response = api.post<Unit>("/SyncPlay/NextItem", pathParameters, queryParameters, data)
		return response
	}

	/**
	 * Request pause in SyncPlay group.
	 */
	public suspend fun syncPlayPause(): Response<Unit> {
		val pathParameters = emptyMap<String, Any?>()
		val queryParameters = emptyMap<String, Any?>()
		val data = null
		val response = api.post<Unit>("/SyncPlay/Pause", pathParameters, queryParameters, data)
		return response
	}

	/**
	 * Update session ping.
	 */
	public suspend fun syncPlayPing(`data`: PingRequestDto): Response<Unit> {
		val pathParameters = emptyMap<String, Any?>()
		val queryParameters = emptyMap<String, Any?>()
		val response = api.post<Unit>("/SyncPlay/Ping", pathParameters, queryParameters, data)
		return response
	}

	/**
	 * Request previous item in SyncPlay group.
	 */
	public suspend fun syncPlayPreviousItem(`data`: PreviousItemRequestDto): Response<Unit> {
		val pathParameters = emptyMap<String, Any?>()
		val queryParameters = emptyMap<String, Any?>()
		val response = api.post<Unit>("/SyncPlay/PreviousItem", pathParameters, queryParameters, data)
		return response
	}

	/**
	 * Request to queue items to the playlist of a SyncPlay group.
	 */
	public suspend fun syncPlayQueue(`data`: QueueRequestDto): Response<Unit> {
		val pathParameters = emptyMap<String, Any?>()
		val queryParameters = emptyMap<String, Any?>()
		val response = api.post<Unit>("/SyncPlay/Queue", pathParameters, queryParameters, data)
		return response
	}

	/**
	 * Notify SyncPlay group that member is ready for playback.
	 */
	public suspend fun syncPlayReady(`data`: ReadyRequestDto): Response<Unit> {
		val pathParameters = emptyMap<String, Any?>()
		val queryParameters = emptyMap<String, Any?>()
		val response = api.post<Unit>("/SyncPlay/Ready", pathParameters, queryParameters, data)
		return response
	}

	/**
	 * Request to remove items from the playlist in SyncPlay group.
	 */
	public suspend fun syncPlayRemoveFromPlaylist(`data`: RemoveFromPlaylistRequestDto):
			Response<Unit> {
		val pathParameters = emptyMap<String, Any?>()
		val queryParameters = emptyMap<String, Any?>()
		val response = api.post<Unit>("/SyncPlay/RemoveFromPlaylist", pathParameters, queryParameters,
				data)
		return response
	}

	/**
	 * Request seek in SyncPlay group.
	 */
	public suspend fun syncPlaySeek(`data`: SeekRequestDto): Response<Unit> {
		val pathParameters = emptyMap<String, Any?>()
		val queryParameters = emptyMap<String, Any?>()
		val response = api.post<Unit>("/SyncPlay/Seek", pathParameters, queryParameters, data)
		return response
	}

	/**
	 * Request SyncPlay group to ignore member during group-wait.
	 */
	public suspend fun syncPlaySetIgnoreWait(`data`: IgnoreWaitRequestDto): Response<Unit> {
		val pathParameters = emptyMap<String, Any?>()
		val queryParameters = emptyMap<String, Any?>()
		val response = api.post<Unit>("/SyncPlay/SetIgnoreWait", pathParameters, queryParameters, data)
		return response
	}

	/**
	 * Request to set new playlist in SyncPlay group.
	 */
	public suspend fun syncPlaySetNewQueue(`data`: PlayRequestDto): Response<Unit> {
		val pathParameters = emptyMap<String, Any?>()
		val queryParameters = emptyMap<String, Any?>()
		val response = api.post<Unit>("/SyncPlay/SetNewQueue", pathParameters, queryParameters, data)
		return response
	}

	/**
	 * Request to change playlist item in SyncPlay group.
	 */
	public suspend fun syncPlaySetPlaylistItem(`data`: SetPlaylistItemRequestDto): Response<Unit> {
		val pathParameters = emptyMap<String, Any?>()
		val queryParameters = emptyMap<String, Any?>()
		val response = api.post<Unit>("/SyncPlay/SetPlaylistItem", pathParameters, queryParameters, data)
		return response
	}

	/**
	 * Request to set repeat mode in SyncPlay group.
	 */
	public suspend fun syncPlaySetRepeatMode(`data`: SetRepeatModeRequestDto): Response<Unit> {
		val pathParameters = emptyMap<String, Any?>()
		val queryParameters = emptyMap<String, Any?>()
		val response = api.post<Unit>("/SyncPlay/SetRepeatMode", pathParameters, queryParameters, data)
		return response
	}

	/**
	 * Request to set shuffle mode in SyncPlay group.
	 */
	public suspend fun syncPlaySetShuffleMode(`data`: SetShuffleModeRequestDto): Response<Unit> {
		val pathParameters = emptyMap<String, Any?>()
		val queryParameters = emptyMap<String, Any?>()
		val response = api.post<Unit>("/SyncPlay/SetShuffleMode", pathParameters, queryParameters, data)
		return response
	}

	/**
	 * Request stop in SyncPlay group.
	 */
	public suspend fun syncPlayStop(): Response<Unit> {
		val pathParameters = emptyMap<String, Any?>()
		val queryParameters = emptyMap<String, Any?>()
		val data = null
		val response = api.post<Unit>("/SyncPlay/Stop", pathParameters, queryParameters, data)
		return response
	}

	/**
	 * Request unpause in SyncPlay group.
	 */
	public suspend fun syncPlayUnpause(): Response<Unit> {
		val pathParameters = emptyMap<String, Any?>()
		val queryParameters = emptyMap<String, Any?>()
		val data = null
		val response = api.post<Unit>("/SyncPlay/Unpause", pathParameters, queryParameters, data)
		return response
	}
}
