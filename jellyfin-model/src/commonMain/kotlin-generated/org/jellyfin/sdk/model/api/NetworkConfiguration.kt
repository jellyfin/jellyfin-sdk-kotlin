// !!        WARNING
// !! DO NOT EDIT THIS FILE
//
// This file is generated by the openapi-generator module and is not meant for manual changes.
// Please read the README.md file in the openapi-generator module for additional information.
package org.jellyfin.sdk.model.api

import kotlin.Boolean
import kotlin.Int
import kotlin.String
import kotlin.collections.List
import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable

/**
 * Defines the MediaBrowser.Common.Net.NetworkConfiguration.
 */
@Serializable
public data class NetworkConfiguration(
	/**
	 * A value used to specify the URL prefix that your Jellyfin instance can be accessed at.
	 */
	@SerialName("BaseUrl")
	public val baseUrl: String,
	/**
	 * A value indicating whether to use HTTPS.
	 */
	@SerialName("EnableHttps")
	public val enableHttps: Boolean,
	/**
	 * A value indicating whether the server should force connections over HTTPS.
	 */
	@SerialName("RequireHttps")
	public val requireHttps: Boolean,
	/**
	 * The filesystem path of an X.509 certificate to use for SSL.
	 */
	@SerialName("CertificatePath")
	public val certificatePath: String,
	/**
	 * The password required to access the X.509 certificate data in the file specified by
	 * MediaBrowser.Common.Net.NetworkConfiguration.CertificatePath.
	 */
	@SerialName("CertificatePassword")
	public val certificatePassword: String,
	/**
	 * The internal HTTP server port.
	 */
	@SerialName("InternalHttpPort")
	public val internalHttpPort: Int,
	/**
	 * The internal HTTPS server port.
	 */
	@SerialName("InternalHttpsPort")
	public val internalHttpsPort: Int,
	/**
	 * The public HTTP port.
	 */
	@SerialName("PublicHttpPort")
	public val publicHttpPort: Int,
	/**
	 * The public HTTPS port.
	 */
	@SerialName("PublicHttpsPort")
	public val publicHttpsPort: Int,
	/**
	 * A value indicating whether Autodiscovery is enabled.
	 */
	@SerialName("AutoDiscovery")
	public val autoDiscovery: Boolean,
	/**
	 * A value indicating whether to enable automatic port forwarding.
	 */
	@SerialName("EnableUPnP")
	public val enableUPnP: Boolean,
	/**
	 * A value indicating whether IPv6 is enabled.
	 */
	@SerialName("EnableIPv4")
	public val enableIPv4: Boolean,
	/**
	 * A value indicating whether IPv6 is enabled.
	 */
	@SerialName("EnableIPv6")
	public val enableIPv6: Boolean,
	/**
	 * A value indicating whether access from outside of the LAN is permitted.
	 */
	@SerialName("EnableRemoteAccess")
	public val enableRemoteAccess: Boolean,
	/**
	 * The subnets that are deemed to make up the LAN.
	 */
	@SerialName("LocalNetworkSubnets")
	public val localNetworkSubnets: List<String>,
	/**
	 * The interface addresses which Jellyfin will bind to. If empty, all interfaces will be used.
	 */
	@SerialName("LocalNetworkAddresses")
	public val localNetworkAddresses: List<String>,
	/**
	 * The known proxies.
	 */
	@SerialName("KnownProxies")
	public val knownProxies: List<String>,
	/**
	 * A value indicating whether address names that match
	 * MediaBrowser.Common.Net.NetworkConfiguration.VirtualInterfaceNames should be ignored for the
	 * purposes of binding.
	 */
	@SerialName("IgnoreVirtualInterfaces")
	public val ignoreVirtualInterfaces: Boolean,
	/**
	 * A value indicating the interface name prefixes that should be ignored. The list can be comma
	 * separated and values are case-insensitive.
	 * `P:MediaBrowser.Common.Net.NetworkConfiguration.IgnoreVirtualInterfaces`.
	 */
	@SerialName("VirtualInterfaceNames")
	public val virtualInterfaceNames: List<String>,
	/**
	 * A value indicating whether the published server uri is based on information in HTTP requests.
	 */
	@SerialName("EnablePublishedServerUriByRequest")
	public val enablePublishedServerUriByRequest: Boolean,
	/**
	 * Gets or sets the PublishedServerUriBySubnet
	 * Gets or sets PublishedServerUri to advertise for specific subnets.
	 */
	@SerialName("PublishedServerUriBySubnet")
	public val publishedServerUriBySubnet: List<String>,
	/**
	 * The filter for remote IP connectivity. Used in conjunction with
	 * `P:MediaBrowser.Common.Net.NetworkConfiguration.IsRemoteIPFilterBlacklist`.
	 */
	@SerialName("RemoteIPFilter")
	public val remoteIpFilter: List<String>,
	/**
	 * A value indicating whether `P:MediaBrowser.Common.Net.NetworkConfiguration.RemoteIPFilter`
	 * contains a blacklist or a whitelist. Default is a whitelist.
	 */
	@SerialName("IsRemoteIPFilterBlacklist")
	public val isRemoteIpFilterBlacklist: Boolean,
)
